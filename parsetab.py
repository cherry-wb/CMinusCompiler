
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xd7\x82\x01\x81\x14\x86l\xe2\x02\x1c\x1c\x91W\xa1NO'
    
_lr_action_items = {'RETURN':([10,23,27,29,30,32,33,34,38,41,43,44,47,49,54,55,57,78,79,93,97,98,100,101,102,],[-6,-7,-62,-62,-18,-17,36,-20,-25,-27,-21,-19,-23,-22,-16,-24,-31,-26,-32,36,36,-30,-28,36,-29,]),'LESS':([40,42,45,46,48,51,53,81,82,85,92,94,95,],[62,-55,-50,-54,-56,-35,-46,-45,-54,-53,-49,-36,-57,]),'VOID':([0,2,4,5,7,9,10,12,21,23,26,27,29,30,32,54,],[3,-5,3,-4,-3,-2,-6,16,3,-7,-9,-62,3,-18,-17,-16,]),'NUMBER':([10,11,23,27,29,30,32,33,34,36,38,41,43,44,47,49,50,54,55,57,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,93,96,97,98,100,101,102,],[-6,13,-7,-62,-62,-18,-17,48,-20,48,-25,-27,-21,-19,-23,-22,48,-16,-24,-31,48,48,48,-39,-43,-44,-42,-47,-40,-48,-41,48,48,48,48,-51,-52,48,-26,-32,48,48,48,-30,-28,48,-29,]),'LBRACKET':([8,20,35,51,],[11,24,11,72,]),'WHILE':([10,23,27,29,30,32,33,34,38,41,43,44,47,49,54,55,57,78,79,93,97,98,100,101,102,],[-6,-7,-62,-62,-18,-17,37,-20,-25,-27,-21,-19,-23,-22,-16,-24,-31,-26,-32,37,37,-30,-28,37,-29,]),'MINUS':([40,42,45,46,48,51,53,81,82,83,85,92,94,95,],[68,-55,-50,-54,-56,-35,-46,-45,-54,68,-53,-49,-36,-57,]),'GREATEREQUAL':([40,42,45,46,48,51,53,81,82,85,92,94,95,],[65,-55,-50,-54,-56,-35,-46,-45,-54,-53,-49,-36,-57,]),'RPAREN':([15,16,17,18,20,25,28,39,40,42,45,46,48,51,53,71,73,80,81,82,83,84,85,87,88,89,90,91,92,94,95,99,],[-10,-11,-13,22,-14,-12,-15,-34,-38,-55,-50,-54,-56,-35,-46,85,-62,93,-45,-54,-37,-33,-53,95,-58,-61,-59,97,-49,-36,-57,-60,]),'SEMICOLON':([8,10,19,23,27,29,30,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,51,53,54,55,56,57,58,78,79,81,82,83,84,85,92,93,94,95,97,98,100,101,102,],[10,-6,23,-7,-62,-62,-18,-17,41,-20,10,57,-25,-34,-38,-27,-55,-21,-19,-50,-54,-23,-56,-22,-35,-46,-16,-24,78,-31,79,-26,-32,-45,-54,-37,-33,-53,-49,41,-36,-57,41,-30,-28,41,-29,]),'COMMA':([15,17,20,25,28,39,40,42,45,46,48,51,53,81,82,83,84,85,88,89,92,94,95,99,],[21,-13,-14,-12,-15,-34,-38,-55,-50,-54,-56,-35,-46,-45,-54,-37,-33,-53,96,-61,-49,-36,-57,-60,]),'PLUS':([40,42,45,46,48,51,53,81,82,83,85,92,94,95,],[66,-55,-50,-54,-56,-35,-46,-45,-54,66,-53,-49,-36,-57,]),'$end':([2,4,5,6,7,9,10,23,26,54,],[-5,-1,-4,0,-3,-2,-6,-7,-9,-16,]),'DIVIDE':([42,45,46,48,51,53,81,82,85,92,94,95,],[-55,-50,-54,-56,-35,76,76,-54,-53,-49,-36,-57,]),'EQUAL':([46,51,94,],[70,-35,-36,]),'ELSE':([38,41,43,47,49,54,55,57,78,79,98,100,102,],[-25,-27,-21,-23,-22,-16,-24,-31,-26,-32,-30,101,-29,]),'LPAREN':([8,10,23,27,29,30,32,33,34,36,37,38,41,43,44,47,49,50,51,52,54,55,57,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,93,96,97,98,100,101,102,],[12,-6,-7,-62,-62,-18,-17,50,-20,50,59,-25,-27,-21,-19,-23,-22,50,73,74,-16,-24,-31,50,50,50,-39,-43,-44,-42,-47,-40,-48,-41,50,50,50,50,-51,-52,50,-26,-32,50,50,50,-30,-28,50,-29,]),'LESSEQUAL':([40,42,45,46,48,51,53,81,82,85,92,94,95,],[67,-55,-50,-54,-56,-35,-46,-45,-54,-53,-49,-36,-57,]),'LBLOCK':([10,22,23,27,29,30,32,33,34,38,41,43,44,47,49,54,55,57,78,79,93,97,98,100,101,102,],[-6,27,-7,-62,-62,-18,-17,27,-20,-25,-27,-21,-19,-23,-22,-16,-24,-31,-26,-32,27,27,-30,-28,27,-29,]),'TIMES':([42,45,46,48,51,53,81,82,85,92,94,95,],[-55,-50,-54,-56,-35,75,75,-54,-53,-49,-36,-57,]),'ID':([1,3,10,14,16,23,27,29,30,31,32,33,34,36,38,41,43,44,47,49,50,54,55,57,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,93,96,97,98,100,101,102,],[8,-8,-6,20,-8,-7,-62,-62,-18,35,-17,51,-20,51,-25,-27,-21,-19,-23,-22,51,-16,-24,-31,51,51,51,-39,-43,-44,-42,-47,-40,-48,-41,51,51,51,51,-51,-52,51,-26,-32,51,51,51,-30,-28,51,-29,]),'IF':([10,23,27,29,30,32,33,34,38,41,43,44,47,49,54,55,57,78,79,93,97,98,100,101,102,],[-6,-7,-62,-62,-18,-17,52,-20,-25,-27,-21,-19,-23,-22,-16,-24,-31,-26,-32,52,52,-30,-28,52,-29,]),'GREATER':([40,42,45,46,48,51,53,81,82,85,92,94,95,],[69,-55,-50,-54,-56,-35,-46,-45,-54,-53,-49,-36,-57,]),'DEQUAL':([40,42,45,46,48,51,53,81,82,85,92,94,95,],[63,-55,-50,-54,-56,-35,-46,-45,-54,-53,-49,-36,-57,]),'DISTINT':([40,42,45,46,48,51,53,81,82,85,92,94,95,],[64,-55,-50,-54,-56,-35,-46,-45,-54,-53,-49,-36,-57,]),'RBLOCK':([10,23,27,29,30,32,33,34,38,41,43,44,47,49,54,55,57,78,79,98,100,102,],[-6,-7,-62,-62,-18,-17,54,-20,-25,-27,-21,-19,-23,-22,-16,-24,-31,-26,-32,-30,-28,-29,]),'RBRACKET':([13,24,39,40,42,45,46,48,51,53,81,82,83,84,85,86,92,94,95,],[19,28,-34,-38,-55,-50,-54,-56,-35,-46,-45,-54,-37,-33,-53,94,-49,-36,-57,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'param_list':([12,],[15,]),'return_stmt':([33,93,97,101,],[38,38,38,38,]),'simple_expression':([33,36,50,59,70,72,73,74,93,96,97,101,],[39,39,39,39,39,39,39,39,39,39,39,39,]),'additive_expression':([33,36,50,59,61,70,72,73,74,93,96,97,101,],[40,40,40,40,83,40,40,40,40,40,40,40,40,]),'type_specifier':([0,4,12,21,29,],[1,1,14,14,31,]),'param':([12,21,],[17,25,]),'var_declaration':([0,4,29,],[5,5,32,]),'program':([0,],[6,]),'call':([33,36,50,59,60,61,70,72,73,74,77,93,96,97,101,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'statement':([33,93,97,101,],[44,98,100,102,]),'factor':([33,36,50,59,60,61,70,72,73,74,77,93,96,97,101,],[45,45,45,45,45,45,45,45,45,45,92,45,45,45,45,]),'var':([33,36,50,59,60,61,70,72,73,74,77,93,96,97,101,],[46,46,46,46,82,82,46,46,46,46,82,46,46,46,46,]),'selection_stmt':([33,93,97,101,],[47,47,47,47,]),'empty':([27,29,73,],[30,34,90,]),'addop':([40,83,],[60,60,]),'args':([73,],[87,]),'compount_stmt':([22,33,93,97,101,],[26,49,49,49,49,]),'args_list':([73,],[88,]),'declaration':([0,4,],[7,9,]),'local_declarations':([27,],[29,]),'term':([33,36,50,59,60,61,70,72,73,74,93,96,97,101,],[53,53,53,53,81,53,53,53,53,53,53,53,53,53,]),'relop':([40,],[61,]),'expression_stmt':([33,93,97,101,],[43,43,43,43,]),'declaration_list':([0,],[4,]),'fun_declaration':([0,4,],[2,2,]),'mulop':([53,81,],[77,77,]),'params':([12,],[18,]),'statement_list':([29,],[33,]),'iteration_stmt':([33,93,97,101,],[55,55,55,55,]),'expression':([33,36,50,59,70,72,73,74,93,96,97,101,],[56,58,71,80,84,86,89,91,56,99,56,56,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','cminus_parser.py',7),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_1','cminus_parser.py',11),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_2','cminus_parser.py',15),
  ('declaration -> var_declaration','declaration',1,'p_declaration','cminus_parser.py',19),
  ('declaration -> fun_declaration','declaration',1,'p_declaration','cminus_parser.py',20),
  ('var_declaration -> type_specifier ID SEMICOLON','var_declaration',3,'p_var_declaration_1','cminus_parser.py',24),
  ('var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON','var_declaration',6,'p_var_declaration_2','cminus_parser.py',28),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier_2','cminus_parser.py',40),
  ('fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt','fun_declaration',6,'p_fun_declaration','cminus_parser.py',45),
  ('params -> param_list','params',1,'p_params_1','cminus_parser.py',50),
  ('params -> VOID','params',1,'p_params_2','cminus_parser.py',55),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list_1','cminus_parser.py',59),
  ('param_list -> param','param_list',1,'p_param_list_2','cminus_parser.py',63),
  ('param -> type_specifier ID','param',2,'p_param_1','cminus_parser.py',67),
  ('param -> type_specifier ID LBRACKET RBRACKET','param',4,'p_param_2','cminus_parser.py',71),
  ('compount_stmt -> LBLOCK local_declarations statement_list RBLOCK','compount_stmt',4,'p_compount_stmt','cminus_parser.py',75),
  ('local_declarations -> local_declarations var_declaration','local_declarations',2,'p_local_declarations_1','cminus_parser.py',79),
  ('local_declarations -> empty','local_declarations',1,'p_local_declarations_2','cminus_parser.py',83),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_1','cminus_parser.py',87),
  ('statement_list -> empty','statement_list',1,'p_statement_list_2','cminus_parser.py',91),
  ('statement -> expression_stmt','statement',1,'p_statement','cminus_parser.py',95),
  ('statement -> compount_stmt','statement',1,'p_statement','cminus_parser.py',96),
  ('statement -> selection_stmt','statement',1,'p_statement','cminus_parser.py',97),
  ('statement -> iteration_stmt','statement',1,'p_statement','cminus_parser.py',98),
  ('statement -> return_stmt','statement',1,'p_statement','cminus_parser.py',99),
  ('expression_stmt -> expression SEMICOLON','expression_stmt',2,'p_expression_stmt_1','cminus_parser.py',104),
  ('expression_stmt -> SEMICOLON','expression_stmt',1,'p_expression_stmt_2','cminus_parser.py',108),
  ('selection_stmt -> IF LPAREN expression RPAREN statement','selection_stmt',5,'p_selection_stmt_1','cminus_parser.py',112),
  ('selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement','selection_stmt',7,'p_selection_stmt_2','cminus_parser.py',116),
  ('iteration_stmt -> WHILE LPAREN expression RPAREN statement','iteration_stmt',5,'p_iteration_stmt','cminus_parser.py',120),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt_1','cminus_parser.py',124),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt_2','cminus_parser.py',128),
  ('expression -> var EQUAL expression','expression',3,'p_expression_1','cminus_parser.py',132),
  ('expression -> simple_expression','expression',1,'p_expression_2','cminus_parser.py',136),
  ('var -> ID','var',1,'p_var_1','cminus_parser.py',140),
  ('var -> ID LBRACKET expression RBRACKET','var',4,'p_var_2','cminus_parser.py',144),
  ('simple_expression -> additive_expression relop additive_expression','simple_expression',3,'p_simple_expression_1','cminus_parser.py',148),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression_2','cminus_parser.py',152),
  ('relop -> LESS','relop',1,'p_relop','cminus_parser.py',157),
  ('relop -> LESSEQUAL','relop',1,'p_relop','cminus_parser.py',158),
  ('relop -> GREATER','relop',1,'p_relop','cminus_parser.py',159),
  ('relop -> GREATEREQUAL','relop',1,'p_relop','cminus_parser.py',160),
  ('relop -> DEQUAL','relop',1,'p_relop','cminus_parser.py',161),
  ('relop -> DISTINT','relop',1,'p_relop','cminus_parser.py',162),
  ('additive_expression -> additive_expression addop term','additive_expression',3,'p_additive_expression_1','cminus_parser.py',167),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression_2','cminus_parser.py',171),
  ('addop -> PLUS','addop',1,'p_addop','cminus_parser.py',175),
  ('addop -> MINUS','addop',1,'p_addop','cminus_parser.py',176),
  ('term -> term mulop factor','term',3,'p_term_1','cminus_parser.py',181),
  ('term -> factor','term',1,'p_term_2','cminus_parser.py',185),
  ('mulop -> TIMES','mulop',1,'p_mulop','cminus_parser.py',189),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','cminus_parser.py',190),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_1','cminus_parser.py',195),
  ('factor -> var','factor',1,'p_factor_2','cminus_parser.py',199),
  ('factor -> call','factor',1,'p_factor_3','cminus_parser.py',203),
  ('factor -> NUMBER','factor',1,'p_factor_4','cminus_parser.py',207),
  ('call -> ID LPAREN args RPAREN','call',4,'p_call','cminus_parser.py',211),
  ('args -> args_list','args',1,'p_args','cminus_parser.py',215),
  ('args -> empty','args',1,'p_args','cminus_parser.py',216),
  ('args_list -> args_list COMMA expression','args_list',3,'p_args_list_1','cminus_parser.py',221),
  ('args_list -> expression','args_list',1,'p_args_list_2','cminus_parser.py',225),
  ('empty -> <empty>','empty',0,'p_empty','cminus_parser.py',229),
]
