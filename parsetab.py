
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '9Oe\xe1\xb2\x90#\xf1\x85_Q\xa9\x80KN\xf2'
    
_lr_action_items = {'RETURN':([13,14,30,39,43,44,46,47,49,50,51,55,59,60,63,66,71,72,74,96,97,115,120,121,124,126,127,128,129,],[-10,-6,-8,-7,-72,-9,-72,-26,-25,53,-28,-33,-29,-27,-31,-30,-24,-32,-39,-34,-40,53,53,-37,-35,53,53,-36,-38,]),'LESS':([57,58,61,62,65,68,70,99,100,101,105,114,117,118,],[79,-65,-60,-64,-66,-45,-56,-55,-64,-45,-63,-59,-46,-67,]),'VOID':([0,2,5,6,8,12,13,14,17,30,36,39,42,43,44,46,47,49,71,86,],[3,-5,3,-4,-3,-2,-10,-6,24,-8,3,-7,-16,-72,-9,3,-26,-25,-24,3,]),'EQUAL':([11,52,62,68,117,],[15,15,85,-45,-46,]),'LBRACKET':([11,35,52,68,101,],[16,40,16,89,89,]),'WHILE':([13,14,30,39,43,44,46,47,49,50,51,55,59,60,63,66,71,72,74,96,97,115,120,121,124,126,127,128,129,],[-10,-6,-8,-7,-72,-9,-72,-26,-25,54,-28,-33,-29,-27,-31,-30,-24,-32,-39,-34,-40,54,54,-37,-35,54,54,-36,-38,]),'MINUS':([20,57,58,61,62,65,68,70,88,99,100,101,102,105,114,117,118,],[32,32,-65,-60,-64,-66,88,-56,106,-55,-64,-45,32,-63,-59,-46,-67,]),'GREATEREQUAL':([57,58,61,62,65,68,70,99,100,101,105,114,117,118,],[82,-65,-60,-64,-66,-45,-56,-55,-64,-45,-63,-59,-46,-67,]),'RPAREN':([17,23,24,25,26,27,35,41,45,56,57,58,61,62,65,68,70,87,91,98,99,100,101,102,103,105,106,108,109,110,111,112,113,114,117,118,123,125,],[-72,-17,-18,-20,37,-21,-22,-19,-23,-42,-48,-65,-60,-64,-66,-45,-56,105,-72,115,-55,-64,-45,-47,-41,-63,-44,-43,-69,118,-68,-71,120,-59,-46,-67,-70,127,]),'SEMICOLON':([10,11,19,28,29,34,38,52,53,56,57,58,61,62,65,68,70,73,75,99,100,101,102,103,105,106,108,114,116,117,118,],[13,14,30,-12,-11,39,44,14,74,-42,-48,-65,-60,-64,-66,-45,-56,96,97,-55,-64,-45,-47,-41,-63,-44,-43,-59,122,-46,-67,]),'PLUS':([20,57,58,61,62,65,68,70,90,99,100,101,102,105,114,117,118,],[33,33,-65,-60,-64,-66,90,-56,108,-55,-64,-45,33,-63,-59,-46,-67,]),'COMMA':([11,17,23,25,27,28,35,41,45,52,56,57,58,61,62,65,68,70,99,100,101,102,103,105,106,108,111,112,114,117,118,123,],[18,-72,36,-20,-21,18,-22,-19,-23,18,-42,-48,-65,-60,-64,-66,-45,-56,-55,-64,-45,-47,-41,-63,-44,-43,119,-71,-59,-46,-67,-70,]),'$end':([2,5,6,7,8,12,13,14,30,39,42,44,71,],[-5,-1,-4,0,-3,-2,-10,-6,-8,-7,-16,-9,-24,]),'DIVIDE':([58,61,62,65,68,70,99,100,101,105,114,117,118,],[-65,-60,-64,-66,-45,94,94,-64,-45,-63,-59,-46,-67,]),'FOR':([13,14,30,39,43,44,46,47,49,50,51,55,59,60,63,66,71,72,74,96,97,115,120,121,124,126,127,128,129,],[-10,-6,-8,-7,-72,-9,-72,-26,-25,64,-28,-33,-29,-27,-31,-30,-24,-32,-39,-34,-40,64,64,-37,-35,64,64,-36,-38,]),'NUMBER':([13,14,15,16,30,32,33,39,43,44,46,47,49,50,51,53,55,59,60,63,66,67,71,72,74,76,77,78,79,80,81,82,83,84,85,89,91,92,93,94,95,96,97,104,115,119,120,121,122,124,126,127,128,129,],[-10,-6,19,21,-8,-58,-57,-7,-72,-9,-72,-26,-25,65,-28,65,-33,-29,-27,-31,-30,65,-24,-32,-39,65,65,65,-49,-53,-54,-52,-50,-51,65,65,65,65,-61,-62,65,-34,-40,65,65,65,65,-37,65,-35,65,65,-36,-38,]),'ELSE':([55,59,63,66,71,72,74,96,97,121,124,128,129,],[-33,-29,-31,-30,-24,-32,-39,-34,-40,-37,126,-36,-38,]),'LPAREN':([11,13,14,30,32,33,39,43,44,46,47,49,50,51,53,54,55,59,60,63,64,66,67,68,69,71,72,74,76,77,78,79,80,81,82,83,84,85,89,91,92,93,94,95,96,97,101,104,115,119,120,121,122,124,126,127,128,129,],[17,-10,-6,-8,-58,-57,-7,-72,-9,-72,-26,-25,67,-28,67,76,-33,-29,-27,-31,86,-30,67,91,92,-24,-32,-39,67,67,67,-49,-53,-54,-52,-50,-51,67,67,67,67,-61,-62,67,-34,-40,91,67,67,67,67,-37,67,-35,67,67,-36,-38,]),'LESSEQUAL':([57,58,61,62,65,68,70,99,100,101,105,114,117,118,],[83,-65,-60,-64,-66,-45,-56,-55,-64,-45,-63,-59,-46,-67,]),'LBLOCK':([13,14,30,37,39,43,44,46,47,49,50,51,55,59,60,63,66,71,72,74,96,97,115,120,121,124,126,127,128,129,],[-10,-6,-8,43,-7,-72,-9,-72,-26,-25,43,-28,-33,-29,-27,-31,-30,-24,-32,-39,-34,-40,43,43,-37,-35,43,43,-36,-38,]),'TIMES':([58,61,62,65,68,70,99,100,101,105,114,117,118,],[-65,-60,-64,-66,-45,93,93,-64,-45,-63,-59,-46,-67,]),'ID':([1,3,4,9,13,14,15,18,22,24,30,31,32,33,39,43,44,46,47,48,49,50,51,53,55,59,60,63,66,67,71,72,74,76,77,78,79,80,81,82,83,84,85,89,91,92,93,94,95,96,97,104,115,119,120,121,122,124,126,127,128,129,],[11,-15,-14,-13,-10,-6,20,28,35,-15,-8,38,-58,-57,-7,-72,-9,-72,-26,52,-25,68,-28,68,-33,-29,-27,-31,-30,68,-24,-32,-39,68,101,101,-49,-53,-54,-52,-50,-51,68,68,68,68,-61,-62,101,-34,-40,68,68,68,68,-37,68,-35,68,68,-36,-38,]),'IF':([13,14,30,39,43,44,46,47,49,50,51,55,59,60,63,66,71,72,74,96,97,115,120,121,124,126,127,128,129,],[-10,-6,-8,-7,-72,-9,-72,-26,-25,69,-28,-33,-29,-27,-31,-30,-24,-32,-39,-34,-40,69,69,-37,-35,69,69,-36,-38,]),'GREATER':([57,58,61,62,65,68,70,99,100,101,105,114,117,118,],[84,-65,-60,-64,-66,-45,-56,-55,-64,-45,-63,-59,-46,-67,]),'INT':([0,2,5,6,8,12,13,14,17,30,36,39,42,43,44,46,47,49,71,86,],[9,-5,9,-4,-3,-2,-10,-6,9,-8,9,-7,-16,-72,-9,9,-26,-25,-24,9,]),'DEQUAL':([57,58,61,62,65,68,70,99,100,101,105,114,117,118,],[80,-65,-60,-64,-66,-45,-56,-55,-64,-45,-63,-59,-46,-67,]),'FLOAT':([0,2,5,6,8,12,13,14,17,30,36,39,42,43,44,46,47,49,71,86,],[4,-5,4,-4,-3,-2,-10,-6,4,-8,4,-7,-16,-72,-9,4,-26,-25,-24,4,]),'DISTINT':([57,58,61,62,65,68,70,99,100,101,105,114,117,118,],[81,-65,-60,-64,-66,-45,-56,-55,-64,-45,-63,-59,-46,-67,]),'RBLOCK':([13,14,30,39,43,44,46,47,49,50,51,55,59,60,63,66,71,72,74,96,97,121,124,128,129,],[-10,-6,-8,-7,-72,-9,-72,-26,-25,71,-28,-33,-29,-27,-31,-30,-24,-32,-39,-34,-40,-37,-35,-36,-38,]),'RBRACKET':([21,40,56,57,58,61,62,65,68,70,99,100,101,102,103,105,106,107,108,114,117,118,],[34,45,-42,-48,-65,-60,-64,-66,-45,-56,-55,-64,-45,-47,-41,-63,-44,117,-43,-59,-46,-67,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'param_list':([17,],[23,]),'iteration_stmt':([50,115,120,126,127,],[72,72,72,72,72,]),'simple_expression':([50,53,67,76,85,89,91,92,104,115,119,120,122,126,127,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'additive_expression':([50,53,67,76,78,85,89,91,92,104,115,119,120,122,126,127,],[57,57,57,57,102,57,57,57,57,57,57,57,57,57,57,57,]),'type_specifier':([0,5,17,36,46,86,],[1,1,22,22,48,48,]),'call':([50,53,67,76,77,78,85,89,91,92,95,104,115,119,120,122,126,127,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'param':([17,36,],[25,41,]),'var_declaration':([0,5,46,86,],[6,6,49,104,]),'program':([0,],[7,]),'expression_stmt':([50,115,120,126,127,],[59,59,59,59,59,]),'statement':([50,115,120,126,127,],[60,121,124,128,129,]),'factor':([50,53,67,76,77,78,85,89,91,92,95,104,115,119,120,122,126,127,],[61,61,61,61,61,61,61,61,61,61,114,61,61,61,61,61,61,61,]),'var':([50,53,67,76,77,78,85,89,91,92,95,104,115,119,120,122,126,127,],[62,62,62,62,100,100,62,62,62,62,100,62,62,62,62,62,62,62,]),'selection_stmt':([50,115,120,126,127,],[63,63,63,63,63,]),'empty':([17,43,46,91,],[27,47,51,109,]),'addop':([20,57,102,],[31,77,77,]),'variosIDs':([1,18,48,],[10,29,10,]),'args':([91,],[110,]),'compount_stmt':([37,50,115,120,126,127,],[42,66,66,66,66,66,]),'args_list':([91,],[111,]),'declaration':([0,5,],[8,12,]),'local_declarations':([43,],[46,]),'term':([50,53,67,76,77,78,85,89,91,92,104,115,119,120,122,126,127,],[70,70,70,70,99,70,70,70,70,70,70,70,70,70,70,70,70,]),'relop':([57,],[78,]),'declaration_list':([0,],[5,]),'fun_declaration':([0,5,],[2,2,]),'mulop':([70,99,],[95,95,]),'params':([17,],[26,]),'statement_list':([46,],[50,]),'return_stmt':([50,115,120,126,127,],[55,55,55,55,55,]),'expression':([50,53,67,76,85,89,91,92,104,115,119,120,122,126,127,],[73,75,87,98,103,107,112,113,116,73,123,73,125,73,73,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','cminus_parser.py',13),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','cminus_parser.py',17),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','cminus_parser.py',18),
  ('declaration -> var_declaration','declaration',1,'p_declaration','cminus_parser.py',22),
  ('declaration -> fun_declaration','declaration',1,'p_declaration','cminus_parser.py',23),
  ('var_declaration -> type_specifier ID SEMICOLON','var_declaration',3,'p_var_declaration','cminus_parser.py',27),
  ('var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON','var_declaration',6,'p_var_declaration','cminus_parser.py',28),
  ('var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON','var_declaration',5,'p_var_declaration','cminus_parser.py',29),
  ('var_declaration -> type_specifier ID EQUAL ID addop ID SEMICOLON','var_declaration',7,'p_var_declaration','cminus_parser.py',30),
  ('var_declaration -> type_specifier variosIDs SEMICOLON','var_declaration',3,'p_var_declaration','cminus_parser.py',31),
  ('variosIDs -> ID COMMA variosIDs','variosIDs',3,'p_variosIDs','cminus_parser.py',35),
  ('variosIDs -> ID','variosIDs',1,'p_variosIDs','cminus_parser.py',36),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','cminus_parser.py',40),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','cminus_parser.py',41),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','cminus_parser.py',42),
  ('fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt','fun_declaration',6,'p_fun_declaration','cminus_parser.py',46),
  ('params -> param_list','params',1,'p_params','cminus_parser.py',50),
  ('params -> VOID','params',1,'p_params','cminus_parser.py',51),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','cminus_parser.py',55),
  ('param_list -> param','param_list',1,'p_param_list','cminus_parser.py',56),
  ('param_list -> empty','param_list',1,'p_param_list','cminus_parser.py',57),
  ('param -> type_specifier ID','param',2,'p_param','cminus_parser.py',61),
  ('param -> type_specifier ID LBRACKET RBRACKET','param',4,'p_param','cminus_parser.py',62),
  ('compount_stmt -> LBLOCK local_declarations statement_list RBLOCK','compount_stmt',4,'p_compount_stmt','cminus_parser.py',66),
  ('local_declarations -> local_declarations var_declaration','local_declarations',2,'p_local_declarations','cminus_parser.py',70),
  ('local_declarations -> empty','local_declarations',1,'p_local_declarations','cminus_parser.py',71),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','cminus_parser.py',75),
  ('statement_list -> empty','statement_list',1,'p_statement_list','cminus_parser.py',76),
  ('statement -> expression_stmt','statement',1,'p_statement','cminus_parser.py',81),
  ('statement -> compount_stmt','statement',1,'p_statement','cminus_parser.py',82),
  ('statement -> selection_stmt','statement',1,'p_statement','cminus_parser.py',83),
  ('statement -> iteration_stmt','statement',1,'p_statement','cminus_parser.py',84),
  ('statement -> return_stmt','statement',1,'p_statement','cminus_parser.py',85),
  ('expression_stmt -> expression SEMICOLON','expression_stmt',2,'p_expression_stmt','cminus_parser.py',95),
  ('selection_stmt -> IF LPAREN expression RPAREN statement','selection_stmt',5,'p_selection_stmt','cminus_parser.py',99),
  ('selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement','selection_stmt',7,'p_selection_stmt','cminus_parser.py',100),
  ('iteration_stmt -> WHILE LPAREN expression RPAREN statement','iteration_stmt',5,'p_iteration_stmt','cminus_parser.py',104),
  ('iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement','iteration_stmt',8,'p_iteration_stmt','cminus_parser.py',105),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt','cminus_parser.py',110),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt','cminus_parser.py',111),
  ('expression -> var EQUAL expression','expression',3,'p_expression','cminus_parser.py',115),
  ('expression -> simple_expression','expression',1,'p_expression','cminus_parser.py',116),
  ('expression -> ID PLUS PLUS','expression',3,'p_expression','cminus_parser.py',117),
  ('expression -> ID MINUS MINUS','expression',3,'p_expression','cminus_parser.py',118),
  ('var -> ID','var',1,'p_var','cminus_parser.py',122),
  ('var -> ID LBRACKET expression RBRACKET','var',4,'p_var','cminus_parser.py',123),
  ('simple_expression -> additive_expression relop additive_expression','simple_expression',3,'p_simple_expression','cminus_parser.py',127),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression','cminus_parser.py',128),
  ('relop -> LESS','relop',1,'p_relop','cminus_parser.py',132),
  ('relop -> LESSEQUAL','relop',1,'p_relop','cminus_parser.py',133),
  ('relop -> GREATER','relop',1,'p_relop','cminus_parser.py',134),
  ('relop -> GREATEREQUAL','relop',1,'p_relop','cminus_parser.py',135),
  ('relop -> DEQUAL','relop',1,'p_relop','cminus_parser.py',136),
  ('relop -> DISTINT','relop',1,'p_relop','cminus_parser.py',137),
  ('additive_expression -> additive_expression addop term','additive_expression',3,'p_additive_expression','cminus_parser.py',141),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression','cminus_parser.py',142),
  ('addop -> PLUS','addop',1,'p_addop','cminus_parser.py',146),
  ('addop -> MINUS','addop',1,'p_addop','cminus_parser.py',147),
  ('term -> term mulop factor','term',3,'p_term','cminus_parser.py',151),
  ('term -> factor','term',1,'p_term','cminus_parser.py',152),
  ('mulop -> TIMES','mulop',1,'p_mulop','cminus_parser.py',157),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','cminus_parser.py',158),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','cminus_parser.py',162),
  ('factor -> var','factor',1,'p_factor','cminus_parser.py',163),
  ('factor -> call','factor',1,'p_factor','cminus_parser.py',164),
  ('factor -> NUMBER','factor',1,'p_factor','cminus_parser.py',165),
  ('call -> ID LPAREN args RPAREN','call',4,'p_call','cminus_parser.py',169),
  ('args -> args_list','args',1,'p_args','cminus_parser.py',173),
  ('args -> empty','args',1,'p_args','cminus_parser.py',174),
  ('args_list -> args_list COMMA expression','args_list',3,'p_args_list_1','cminus_parser.py',178),
  ('args_list -> expression','args_list',1,'p_args_list_1','cminus_parser.py',179),
  ('empty -> <empty>','empty',0,'p_empty','cminus_parser.py',183),
]
