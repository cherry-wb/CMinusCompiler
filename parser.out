Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> declaration_list
Rule 2     declaration_list -> declaration_list declaration
Rule 3     declaration_list -> declaration
Rule 4     declaration -> var_declaration
Rule 5     declaration -> fun_declaration
Rule 6     var_declaration -> type_specifier ID SEMICOLON
Rule 7     var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
Rule 8     var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON
Rule 9     var_declaration -> type_specifier ID EQUAL ID addop ID SEMICOLON
Rule 10    var_declaration -> type_specifier variosIDs SEMICOLON
Rule 11    variosIDs -> ID COMMA variosIDs
Rule 12    variosIDs -> ID
Rule 13    type_specifier -> INT
Rule 14    type_specifier -> FLOAT
Rule 15    type_specifier -> VOID
Rule 16    fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt
Rule 17    params -> param_list
Rule 18    params -> VOID
Rule 19    param_list -> param_list COMMA param
Rule 20    param_list -> param
Rule 21    param_list -> empty
Rule 22    param -> type_specifier ID
Rule 23    param -> type_specifier ID LBRACKET RBRACKET
Rule 24    compount_stmt -> LBLOCK local_declarations statement_list RBLOCK
Rule 25    local_declarations -> local_declarations var_declaration
Rule 26    local_declarations -> empty
Rule 27    statement_list -> statement_list statement
Rule 28    statement_list -> empty
Rule 29    statement -> expression_stmt
Rule 30    statement -> compount_stmt
Rule 31    statement -> selection_stmt
Rule 32    statement -> iteration_stmt
Rule 33    statement -> return_stmt
Rule 34    expression_stmt -> expression SEMICOLON
Rule 35    selection_stmt -> IF LPAREN expression RPAREN statement
Rule 36    selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement
Rule 37    iteration_stmt -> WHILE LPAREN expression RPAREN statement
Rule 38    iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement
Rule 39    return_stmt -> RETURN SEMICOLON
Rule 40    return_stmt -> RETURN expression SEMICOLON
Rule 41    expression -> var EQUAL expression
Rule 42    expression -> simple_expression
Rule 43    expression -> ID PLUS PLUS
Rule 44    expression -> ID MINUS MINUS
Rule 45    var -> ID
Rule 46    var -> ID LBRACKET expression RBRACKET
Rule 47    simple_expression -> additive_expression relop additive_expression
Rule 48    simple_expression -> additive_expression
Rule 49    relop -> LESS
Rule 50    relop -> LESSEQUAL
Rule 51    relop -> GREATER
Rule 52    relop -> GREATEREQUAL
Rule 53    relop -> DEQUAL
Rule 54    relop -> DISTINT
Rule 55    additive_expression -> additive_expression addop term
Rule 56    additive_expression -> term
Rule 57    addop -> PLUS
Rule 58    addop -> MINUS
Rule 59    term -> term mulop factor
Rule 60    term -> factor
Rule 61    mulop -> TIMES
Rule 62    mulop -> DIVIDE
Rule 63    factor -> LPAREN expression RPAREN
Rule 64    factor -> var
Rule 65    factor -> call
Rule 66    factor -> NUMBER
Rule 67    call -> ID LPAREN args RPAREN
Rule 68    args -> args_list
Rule 69    args -> empty
Rule 70    args_list -> args_list COMMA expression
Rule 71    args_list -> expression
Rule 72    empty -> <empty>

Terminals, with rules where they appear

COMMA                : 11 19 70
DEQUAL               : 53
DISTINT              : 54
DIVIDE               : 62
ELSE                 : 36
EQUAL                : 8 9 41
FLOAT                : 14
FOR                  : 38
GREATER              : 51
GREATEREQUAL         : 52
ID                   : 6 7 8 9 9 9 11 12 16 22 23 43 44 45 46 67
IF                   : 35 36
INT                  : 13
LBLOCK               : 24
LBRACKET             : 7 23 46
LESS                 : 49
LESSEQUAL            : 50
LPAREN               : 16 35 36 37 38 63 67
MINUS                : 44 44 58
NUMBER               : 7 8 66
PLUS                 : 43 43 57
RBLOCK               : 24
RBRACKET             : 7 23 46
RETURN               : 39 40
RPAREN               : 16 35 36 37 38 63 67
SEMICOLON            : 6 7 8 9 10 34 38 39 40
TIMES                : 61
VOID                 : 15 18
WHILE                : 37
error                : 

Nonterminals, with rules where they appear

additive_expression  : 47 47 48 55
addop                : 9 55
args                 : 67
args_list            : 68 70
call                 : 65
compount_stmt        : 16 30
declaration          : 2 3
declaration_list     : 1 2
empty                : 21 26 28 69
expression           : 34 35 36 37 38 38 40 41 46 63 70 71
expression_stmt      : 29
factor               : 59 60
fun_declaration      : 5
iteration_stmt       : 32
local_declarations   : 24 25
mulop                : 59
param                : 19 20
param_list           : 17 19
params               : 16
program              : 0
relop                : 47
return_stmt          : 33
selection_stmt       : 31
simple_expression    : 42
statement            : 27 35 36 36 37 38
statement_list       : 24 27
term                 : 55 56 59
type_specifier       : 6 7 8 9 10 16 22 23
var                  : 41 64
var_declaration      : 4 25 38
variosIDs            : 10 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declaration_list
    (2) declaration_list -> . declaration_list declaration
    (3) declaration_list -> . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . fun_declaration
    (6) var_declaration -> . type_specifier ID SEMICOLON
    (7) var_declaration -> . type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
    (8) var_declaration -> . type_specifier ID EQUAL NUMBER SEMICOLON
    (9) var_declaration -> . type_specifier ID EQUAL ID addop ID SEMICOLON
    (10) var_declaration -> . type_specifier variosIDs SEMICOLON
    (16) fun_declaration -> . type_specifier ID LPAREN params RPAREN compount_stmt
    (13) type_specifier -> . INT
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . VOID

    INT             shift and go to state 9
    FLOAT           shift and go to state 4
    VOID            shift and go to state 3

    type_specifier                 shift and go to state 1
    fun_declaration                shift and go to state 2
    declaration_list               shift and go to state 5
    var_declaration                shift and go to state 6
    program                        shift and go to state 7
    declaration                    shift and go to state 8

state 1

    (6) var_declaration -> type_specifier . ID SEMICOLON
    (7) var_declaration -> type_specifier . ID LBRACKET NUMBER RBRACKET SEMICOLON
    (8) var_declaration -> type_specifier . ID EQUAL NUMBER SEMICOLON
    (9) var_declaration -> type_specifier . ID EQUAL ID addop ID SEMICOLON
    (10) var_declaration -> type_specifier . variosIDs SEMICOLON
    (16) fun_declaration -> type_specifier . ID LPAREN params RPAREN compount_stmt
    (11) variosIDs -> . ID COMMA variosIDs
    (12) variosIDs -> . ID

    ID              shift and go to state 11

    variosIDs                      shift and go to state 10

state 2

    (5) declaration -> fun_declaration .

    INT             reduce using rule 5 (declaration -> fun_declaration .)
    FLOAT           reduce using rule 5 (declaration -> fun_declaration .)
    VOID            reduce using rule 5 (declaration -> fun_declaration .)
    $end            reduce using rule 5 (declaration -> fun_declaration .)


state 3

    (15) type_specifier -> VOID .

    ID              reduce using rule 15 (type_specifier -> VOID .)


state 4

    (14) type_specifier -> FLOAT .

    ID              reduce using rule 14 (type_specifier -> FLOAT .)


state 5

    (1) program -> declaration_list .
    (2) declaration_list -> declaration_list . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . fun_declaration
    (6) var_declaration -> . type_specifier ID SEMICOLON
    (7) var_declaration -> . type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
    (8) var_declaration -> . type_specifier ID EQUAL NUMBER SEMICOLON
    (9) var_declaration -> . type_specifier ID EQUAL ID addop ID SEMICOLON
    (10) var_declaration -> . type_specifier variosIDs SEMICOLON
    (16) fun_declaration -> . type_specifier ID LPAREN params RPAREN compount_stmt
    (13) type_specifier -> . INT
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . VOID

    $end            reduce using rule 1 (program -> declaration_list .)
    INT             shift and go to state 9
    FLOAT           shift and go to state 4
    VOID            shift and go to state 3

    type_specifier                 shift and go to state 1
    fun_declaration                shift and go to state 2
    var_declaration                shift and go to state 6
    declaration                    shift and go to state 12

state 6

    (4) declaration -> var_declaration .

    INT             reduce using rule 4 (declaration -> var_declaration .)
    FLOAT           reduce using rule 4 (declaration -> var_declaration .)
    VOID            reduce using rule 4 (declaration -> var_declaration .)
    $end            reduce using rule 4 (declaration -> var_declaration .)


state 7

    (0) S' -> program .



state 8

    (3) declaration_list -> declaration .

    INT             reduce using rule 3 (declaration_list -> declaration .)
    FLOAT           reduce using rule 3 (declaration_list -> declaration .)
    VOID            reduce using rule 3 (declaration_list -> declaration .)
    $end            reduce using rule 3 (declaration_list -> declaration .)


state 9

    (13) type_specifier -> INT .

    ID              reduce using rule 13 (type_specifier -> INT .)


state 10

    (10) var_declaration -> type_specifier variosIDs . SEMICOLON

    SEMICOLON       shift and go to state 13


state 11

    (6) var_declaration -> type_specifier ID . SEMICOLON
    (7) var_declaration -> type_specifier ID . LBRACKET NUMBER RBRACKET SEMICOLON
    (8) var_declaration -> type_specifier ID . EQUAL NUMBER SEMICOLON
    (9) var_declaration -> type_specifier ID . EQUAL ID addop ID SEMICOLON
    (16) fun_declaration -> type_specifier ID . LPAREN params RPAREN compount_stmt
    (11) variosIDs -> ID . COMMA variosIDs
    (12) variosIDs -> ID .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 14
    LBRACKET        shift and go to state 16
    EQUAL           shift and go to state 15
    LPAREN          shift and go to state 17
    COMMA           shift and go to state 18

  ! SEMICOLON       [ reduce using rule 12 (variosIDs -> ID .) ]


state 12

    (2) declaration_list -> declaration_list declaration .

    INT             reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 2 (declaration_list -> declaration_list declaration .)
    $end            reduce using rule 2 (declaration_list -> declaration_list declaration .)


state 13

    (10) var_declaration -> type_specifier variosIDs SEMICOLON .

    INT             reduce using rule 10 (var_declaration -> type_specifier variosIDs SEMICOLON .)
    FLOAT           reduce using rule 10 (var_declaration -> type_specifier variosIDs SEMICOLON .)
    VOID            reduce using rule 10 (var_declaration -> type_specifier variosIDs SEMICOLON .)
    $end            reduce using rule 10 (var_declaration -> type_specifier variosIDs SEMICOLON .)
    ID              reduce using rule 10 (var_declaration -> type_specifier variosIDs SEMICOLON .)
    LPAREN          reduce using rule 10 (var_declaration -> type_specifier variosIDs SEMICOLON .)
    NUMBER          reduce using rule 10 (var_declaration -> type_specifier variosIDs SEMICOLON .)
    RBLOCK          reduce using rule 10 (var_declaration -> type_specifier variosIDs SEMICOLON .)
    LBLOCK          reduce using rule 10 (var_declaration -> type_specifier variosIDs SEMICOLON .)
    IF              reduce using rule 10 (var_declaration -> type_specifier variosIDs SEMICOLON .)
    WHILE           reduce using rule 10 (var_declaration -> type_specifier variosIDs SEMICOLON .)
    FOR             reduce using rule 10 (var_declaration -> type_specifier variosIDs SEMICOLON .)
    RETURN          reduce using rule 10 (var_declaration -> type_specifier variosIDs SEMICOLON .)


state 14

    (6) var_declaration -> type_specifier ID SEMICOLON .

    INT             reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    FLOAT           reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    VOID            reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    $end            reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    ID              reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    LPAREN          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    NUMBER          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    RBLOCK          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    LBLOCK          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    IF              reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    WHILE           reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    FOR             reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    RETURN          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)


state 15

    (8) var_declaration -> type_specifier ID EQUAL . NUMBER SEMICOLON
    (9) var_declaration -> type_specifier ID EQUAL . ID addop ID SEMICOLON

    NUMBER          shift and go to state 19
    ID              shift and go to state 20


state 16

    (7) var_declaration -> type_specifier ID LBRACKET . NUMBER RBRACKET SEMICOLON

    NUMBER          shift and go to state 21


state 17

    (16) fun_declaration -> type_specifier ID LPAREN . params RPAREN compount_stmt
    (17) params -> . param_list
    (18) params -> . VOID
    (19) param_list -> . param_list COMMA param
    (20) param_list -> . param
    (21) param_list -> . empty
    (22) param -> . type_specifier ID
    (23) param -> . type_specifier ID LBRACKET RBRACKET
    (72) empty -> .
    (13) type_specifier -> . INT
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . VOID

    VOID            shift and go to state 24
    COMMA           reduce using rule 72 (empty -> .)
    RPAREN          reduce using rule 72 (empty -> .)
    INT             shift and go to state 9
    FLOAT           shift and go to state 4

    type_specifier                 shift and go to state 22
    param_list                     shift and go to state 23
    param                          shift and go to state 25
    params                         shift and go to state 26
    empty                          shift and go to state 27

state 18

    (11) variosIDs -> ID COMMA . variosIDs
    (11) variosIDs -> . ID COMMA variosIDs
    (12) variosIDs -> . ID

    ID              shift and go to state 28

    variosIDs                      shift and go to state 29

state 19

    (8) var_declaration -> type_specifier ID EQUAL NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 30


state 20

    (9) var_declaration -> type_specifier ID EQUAL ID . addop ID SEMICOLON
    (57) addop -> . PLUS
    (58) addop -> . MINUS

    PLUS            shift and go to state 33
    MINUS           shift and go to state 32

    addop                          shift and go to state 31

state 21

    (7) var_declaration -> type_specifier ID LBRACKET NUMBER . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 34


state 22

    (22) param -> type_specifier . ID
    (23) param -> type_specifier . ID LBRACKET RBRACKET

    ID              shift and go to state 35


state 23

    (17) params -> param_list .
    (19) param_list -> param_list . COMMA param

    RPAREN          reduce using rule 17 (params -> param_list .)
    COMMA           shift and go to state 36


state 24

    (18) params -> VOID .
    (15) type_specifier -> VOID .

    RPAREN          reduce using rule 18 (params -> VOID .)
    ID              reduce using rule 15 (type_specifier -> VOID .)


state 25

    (20) param_list -> param .

    COMMA           reduce using rule 20 (param_list -> param .)
    RPAREN          reduce using rule 20 (param_list -> param .)


state 26

    (16) fun_declaration -> type_specifier ID LPAREN params . RPAREN compount_stmt

    RPAREN          shift and go to state 37


state 27

    (21) param_list -> empty .

    COMMA           reduce using rule 21 (param_list -> empty .)
    RPAREN          reduce using rule 21 (param_list -> empty .)


state 28

    (11) variosIDs -> ID . COMMA variosIDs
    (12) variosIDs -> ID .

    COMMA           shift and go to state 18
    SEMICOLON       reduce using rule 12 (variosIDs -> ID .)


state 29

    (11) variosIDs -> ID COMMA variosIDs .

    SEMICOLON       reduce using rule 11 (variosIDs -> ID COMMA variosIDs .)


state 30

    (8) var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .

    INT             reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    FLOAT           reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    VOID            reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    $end            reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    ID              reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    LPAREN          reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    NUMBER          reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    RBLOCK          reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    LBLOCK          reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    IF              reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    WHILE           reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    FOR             reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    RETURN          reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)


state 31

    (9) var_declaration -> type_specifier ID EQUAL ID addop . ID SEMICOLON

    ID              shift and go to state 38


state 32

    (58) addop -> MINUS .

    LPAREN          reduce using rule 58 (addop -> MINUS .)
    NUMBER          reduce using rule 58 (addop -> MINUS .)
    ID              reduce using rule 58 (addop -> MINUS .)


state 33

    (57) addop -> PLUS .

    LPAREN          reduce using rule 57 (addop -> PLUS .)
    NUMBER          reduce using rule 57 (addop -> PLUS .)
    ID              reduce using rule 57 (addop -> PLUS .)


state 34

    (7) var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 39


state 35

    (22) param -> type_specifier ID .
    (23) param -> type_specifier ID . LBRACKET RBRACKET

    COMMA           reduce using rule 22 (param -> type_specifier ID .)
    RPAREN          reduce using rule 22 (param -> type_specifier ID .)
    LBRACKET        shift and go to state 40


state 36

    (19) param_list -> param_list COMMA . param
    (22) param -> . type_specifier ID
    (23) param -> . type_specifier ID LBRACKET RBRACKET
    (13) type_specifier -> . INT
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . VOID

    INT             shift and go to state 9
    FLOAT           shift and go to state 4
    VOID            shift and go to state 3

    type_specifier                 shift and go to state 22
    param                          shift and go to state 41

state 37

    (16) fun_declaration -> type_specifier ID LPAREN params RPAREN . compount_stmt
    (24) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK

    LBLOCK          shift and go to state 43

    compount_stmt                  shift and go to state 42

state 38

    (9) var_declaration -> type_specifier ID EQUAL ID addop ID . SEMICOLON

    SEMICOLON       shift and go to state 44


state 39

    (7) var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .

    INT             reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    VOID            reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    $end            reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    ID              reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    RBLOCK          reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    LBLOCK          reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    IF              reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    WHILE           reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    FOR             reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    RETURN          reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)


state 40

    (23) param -> type_specifier ID LBRACKET . RBRACKET

    RBRACKET        shift and go to state 45


state 41

    (19) param_list -> param_list COMMA param .

    COMMA           reduce using rule 19 (param_list -> param_list COMMA param .)
    RPAREN          reduce using rule 19 (param_list -> param_list COMMA param .)


state 42

    (16) fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .

    INT             reduce using rule 16 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)
    FLOAT           reduce using rule 16 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)
    VOID            reduce using rule 16 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)
    $end            reduce using rule 16 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)


state 43

    (24) compount_stmt -> LBLOCK . local_declarations statement_list RBLOCK
    (25) local_declarations -> . local_declarations var_declaration
    (26) local_declarations -> . empty
    (72) empty -> .

    INT             reduce using rule 72 (empty -> .)
    FLOAT           reduce using rule 72 (empty -> .)
    VOID            reduce using rule 72 (empty -> .)
    RBLOCK          reduce using rule 72 (empty -> .)
    LBLOCK          reduce using rule 72 (empty -> .)
    IF              reduce using rule 72 (empty -> .)
    WHILE           reduce using rule 72 (empty -> .)
    FOR             reduce using rule 72 (empty -> .)
    RETURN          reduce using rule 72 (empty -> .)
    ID              reduce using rule 72 (empty -> .)
    LPAREN          reduce using rule 72 (empty -> .)
    NUMBER          reduce using rule 72 (empty -> .)

    local_declarations             shift and go to state 46
    empty                          shift and go to state 47

state 44

    (9) var_declaration -> type_specifier ID EQUAL ID addop ID SEMICOLON .

    INT             reduce using rule 9 (var_declaration -> type_specifier ID EQUAL ID addop ID SEMICOLON .)
    FLOAT           reduce using rule 9 (var_declaration -> type_specifier ID EQUAL ID addop ID SEMICOLON .)
    VOID            reduce using rule 9 (var_declaration -> type_specifier ID EQUAL ID addop ID SEMICOLON .)
    $end            reduce using rule 9 (var_declaration -> type_specifier ID EQUAL ID addop ID SEMICOLON .)
    ID              reduce using rule 9 (var_declaration -> type_specifier ID EQUAL ID addop ID SEMICOLON .)
    LPAREN          reduce using rule 9 (var_declaration -> type_specifier ID EQUAL ID addop ID SEMICOLON .)
    NUMBER          reduce using rule 9 (var_declaration -> type_specifier ID EQUAL ID addop ID SEMICOLON .)
    RBLOCK          reduce using rule 9 (var_declaration -> type_specifier ID EQUAL ID addop ID SEMICOLON .)
    LBLOCK          reduce using rule 9 (var_declaration -> type_specifier ID EQUAL ID addop ID SEMICOLON .)
    IF              reduce using rule 9 (var_declaration -> type_specifier ID EQUAL ID addop ID SEMICOLON .)
    WHILE           reduce using rule 9 (var_declaration -> type_specifier ID EQUAL ID addop ID SEMICOLON .)
    FOR             reduce using rule 9 (var_declaration -> type_specifier ID EQUAL ID addop ID SEMICOLON .)
    RETURN          reduce using rule 9 (var_declaration -> type_specifier ID EQUAL ID addop ID SEMICOLON .)


state 45

    (23) param -> type_specifier ID LBRACKET RBRACKET .

    COMMA           reduce using rule 23 (param -> type_specifier ID LBRACKET RBRACKET .)
    RPAREN          reduce using rule 23 (param -> type_specifier ID LBRACKET RBRACKET .)


state 46

    (24) compount_stmt -> LBLOCK local_declarations . statement_list RBLOCK
    (25) local_declarations -> local_declarations . var_declaration
    (27) statement_list -> . statement_list statement
    (28) statement_list -> . empty
    (6) var_declaration -> . type_specifier ID SEMICOLON
    (7) var_declaration -> . type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
    (8) var_declaration -> . type_specifier ID EQUAL NUMBER SEMICOLON
    (9) var_declaration -> . type_specifier ID EQUAL ID addop ID SEMICOLON
    (10) var_declaration -> . type_specifier variosIDs SEMICOLON
    (72) empty -> .
    (13) type_specifier -> . INT
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . VOID

    RBLOCK          reduce using rule 72 (empty -> .)
    LBLOCK          reduce using rule 72 (empty -> .)
    IF              reduce using rule 72 (empty -> .)
    WHILE           reduce using rule 72 (empty -> .)
    FOR             reduce using rule 72 (empty -> .)
    RETURN          reduce using rule 72 (empty -> .)
    ID              reduce using rule 72 (empty -> .)
    LPAREN          reduce using rule 72 (empty -> .)
    NUMBER          reduce using rule 72 (empty -> .)
    INT             shift and go to state 9
    FLOAT           shift and go to state 4
    VOID            shift and go to state 3

    type_specifier                 shift and go to state 48
    var_declaration                shift and go to state 49
    statement_list                 shift and go to state 50
    empty                          shift and go to state 51

state 47

    (26) local_declarations -> empty .

    INT             reduce using rule 26 (local_declarations -> empty .)
    FLOAT           reduce using rule 26 (local_declarations -> empty .)
    VOID            reduce using rule 26 (local_declarations -> empty .)
    RBLOCK          reduce using rule 26 (local_declarations -> empty .)
    LBLOCK          reduce using rule 26 (local_declarations -> empty .)
    IF              reduce using rule 26 (local_declarations -> empty .)
    WHILE           reduce using rule 26 (local_declarations -> empty .)
    FOR             reduce using rule 26 (local_declarations -> empty .)
    RETURN          reduce using rule 26 (local_declarations -> empty .)
    ID              reduce using rule 26 (local_declarations -> empty .)
    LPAREN          reduce using rule 26 (local_declarations -> empty .)
    NUMBER          reduce using rule 26 (local_declarations -> empty .)


state 48

    (6) var_declaration -> type_specifier . ID SEMICOLON
    (7) var_declaration -> type_specifier . ID LBRACKET NUMBER RBRACKET SEMICOLON
    (8) var_declaration -> type_specifier . ID EQUAL NUMBER SEMICOLON
    (9) var_declaration -> type_specifier . ID EQUAL ID addop ID SEMICOLON
    (10) var_declaration -> type_specifier . variosIDs SEMICOLON
    (11) variosIDs -> . ID COMMA variosIDs
    (12) variosIDs -> . ID

    ID              shift and go to state 52

    variosIDs                      shift and go to state 10

state 49

    (25) local_declarations -> local_declarations var_declaration .

    INT             reduce using rule 25 (local_declarations -> local_declarations var_declaration .)
    FLOAT           reduce using rule 25 (local_declarations -> local_declarations var_declaration .)
    VOID            reduce using rule 25 (local_declarations -> local_declarations var_declaration .)
    RBLOCK          reduce using rule 25 (local_declarations -> local_declarations var_declaration .)
    LBLOCK          reduce using rule 25 (local_declarations -> local_declarations var_declaration .)
    IF              reduce using rule 25 (local_declarations -> local_declarations var_declaration .)
    WHILE           reduce using rule 25 (local_declarations -> local_declarations var_declaration .)
    FOR             reduce using rule 25 (local_declarations -> local_declarations var_declaration .)
    RETURN          reduce using rule 25 (local_declarations -> local_declarations var_declaration .)
    ID              reduce using rule 25 (local_declarations -> local_declarations var_declaration .)
    LPAREN          reduce using rule 25 (local_declarations -> local_declarations var_declaration .)
    NUMBER          reduce using rule 25 (local_declarations -> local_declarations var_declaration .)


state 50

    (24) compount_stmt -> LBLOCK local_declarations statement_list . RBLOCK
    (27) statement_list -> statement_list . statement
    (29) statement -> . expression_stmt
    (30) statement -> . compount_stmt
    (31) statement -> . selection_stmt
    (32) statement -> . iteration_stmt
    (33) statement -> . return_stmt
    (34) expression_stmt -> . expression SEMICOLON
    (24) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (35) selection_stmt -> . IF LPAREN expression RPAREN statement
    (36) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (37) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (38) iteration_stmt -> . FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement
    (39) return_stmt -> . RETURN SEMICOLON
    (40) return_stmt -> . RETURN expression SEMICOLON
    (41) expression -> . var EQUAL expression
    (42) expression -> . simple_expression
    (43) expression -> . ID PLUS PLUS
    (44) expression -> . ID MINUS MINUS
    (45) var -> . ID
    (46) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (59) term -> . term mulop factor
    (60) term -> . factor
    (63) factor -> . LPAREN expression RPAREN
    (64) factor -> . var
    (65) factor -> . call
    (66) factor -> . NUMBER
    (67) call -> . ID LPAREN args RPAREN

    RBLOCK          shift and go to state 71
    LBLOCK          shift and go to state 43
    IF              shift and go to state 69
    WHILE           shift and go to state 54
    FOR             shift and go to state 64
    RETURN          shift and go to state 53
    ID              shift and go to state 68
    LPAREN          shift and go to state 67
    NUMBER          shift and go to state 65

    term                           shift and go to state 70
    return_stmt                    shift and go to state 55
    call                           shift and go to state 58
    factor                         shift and go to state 61
    compount_stmt                  shift and go to state 66
    iteration_stmt                 shift and go to state 72
    var                            shift and go to state 62
    expression_stmt                shift and go to state 59
    statement                      shift and go to state 60
    selection_stmt                 shift and go to state 63
    simple_expression              shift and go to state 56
    expression                     shift and go to state 73
    additive_expression            shift and go to state 57

state 51

    (28) statement_list -> empty .

    RBLOCK          reduce using rule 28 (statement_list -> empty .)
    LBLOCK          reduce using rule 28 (statement_list -> empty .)
    IF              reduce using rule 28 (statement_list -> empty .)
    WHILE           reduce using rule 28 (statement_list -> empty .)
    FOR             reduce using rule 28 (statement_list -> empty .)
    RETURN          reduce using rule 28 (statement_list -> empty .)
    ID              reduce using rule 28 (statement_list -> empty .)
    LPAREN          reduce using rule 28 (statement_list -> empty .)
    NUMBER          reduce using rule 28 (statement_list -> empty .)


state 52

    (6) var_declaration -> type_specifier ID . SEMICOLON
    (7) var_declaration -> type_specifier ID . LBRACKET NUMBER RBRACKET SEMICOLON
    (8) var_declaration -> type_specifier ID . EQUAL NUMBER SEMICOLON
    (9) var_declaration -> type_specifier ID . EQUAL ID addop ID SEMICOLON
    (11) variosIDs -> ID . COMMA variosIDs
    (12) variosIDs -> ID .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 14
    LBRACKET        shift and go to state 16
    EQUAL           shift and go to state 15
    COMMA           shift and go to state 18

  ! SEMICOLON       [ reduce using rule 12 (variosIDs -> ID .) ]


state 53

    (39) return_stmt -> RETURN . SEMICOLON
    (40) return_stmt -> RETURN . expression SEMICOLON
    (41) expression -> . var EQUAL expression
    (42) expression -> . simple_expression
    (43) expression -> . ID PLUS PLUS
    (44) expression -> . ID MINUS MINUS
    (45) var -> . ID
    (46) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (59) term -> . term mulop factor
    (60) term -> . factor
    (63) factor -> . LPAREN expression RPAREN
    (64) factor -> . var
    (65) factor -> . call
    (66) factor -> . NUMBER
    (67) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 74
    ID              shift and go to state 68
    LPAREN          shift and go to state 67
    NUMBER          shift and go to state 65

    term                           shift and go to state 70
    call                           shift and go to state 58
    factor                         shift and go to state 61
    var                            shift and go to state 62
    simple_expression              shift and go to state 56
    expression                     shift and go to state 75
    additive_expression            shift and go to state 57

state 54

    (37) iteration_stmt -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 76


state 55

    (33) statement -> return_stmt .

    RBLOCK          reduce using rule 33 (statement -> return_stmt .)
    LBLOCK          reduce using rule 33 (statement -> return_stmt .)
    IF              reduce using rule 33 (statement -> return_stmt .)
    WHILE           reduce using rule 33 (statement -> return_stmt .)
    FOR             reduce using rule 33 (statement -> return_stmt .)
    RETURN          reduce using rule 33 (statement -> return_stmt .)
    ID              reduce using rule 33 (statement -> return_stmt .)
    LPAREN          reduce using rule 33 (statement -> return_stmt .)
    NUMBER          reduce using rule 33 (statement -> return_stmt .)
    ELSE            reduce using rule 33 (statement -> return_stmt .)


state 56

    (42) expression -> simple_expression .

    SEMICOLON       reduce using rule 42 (expression -> simple_expression .)
    RPAREN          reduce using rule 42 (expression -> simple_expression .)
    RBRACKET        reduce using rule 42 (expression -> simple_expression .)
    COMMA           reduce using rule 42 (expression -> simple_expression .)


state 57

    (47) simple_expression -> additive_expression . relop additive_expression
    (48) simple_expression -> additive_expression .
    (55) additive_expression -> additive_expression . addop term
    (49) relop -> . LESS
    (50) relop -> . LESSEQUAL
    (51) relop -> . GREATER
    (52) relop -> . GREATEREQUAL
    (53) relop -> . DEQUAL
    (54) relop -> . DISTINT
    (57) addop -> . PLUS
    (58) addop -> . MINUS

    RPAREN          reduce using rule 48 (simple_expression -> additive_expression .)
    SEMICOLON       reduce using rule 48 (simple_expression -> additive_expression .)
    RBRACKET        reduce using rule 48 (simple_expression -> additive_expression .)
    COMMA           reduce using rule 48 (simple_expression -> additive_expression .)
    LESS            shift and go to state 79
    LESSEQUAL       shift and go to state 83
    GREATER         shift and go to state 84
    GREATEREQUAL    shift and go to state 82
    DEQUAL          shift and go to state 80
    DISTINT         shift and go to state 81
    PLUS            shift and go to state 33
    MINUS           shift and go to state 32

    addop                          shift and go to state 77
    relop                          shift and go to state 78

state 58

    (65) factor -> call .

    TIMES           reduce using rule 65 (factor -> call .)
    DIVIDE          reduce using rule 65 (factor -> call .)
    LESS            reduce using rule 65 (factor -> call .)
    LESSEQUAL       reduce using rule 65 (factor -> call .)
    GREATER         reduce using rule 65 (factor -> call .)
    GREATEREQUAL    reduce using rule 65 (factor -> call .)
    DEQUAL          reduce using rule 65 (factor -> call .)
    DISTINT         reduce using rule 65 (factor -> call .)
    PLUS            reduce using rule 65 (factor -> call .)
    MINUS           reduce using rule 65 (factor -> call .)
    SEMICOLON       reduce using rule 65 (factor -> call .)
    RPAREN          reduce using rule 65 (factor -> call .)
    RBRACKET        reduce using rule 65 (factor -> call .)
    COMMA           reduce using rule 65 (factor -> call .)


state 59

    (29) statement -> expression_stmt .

    RBLOCK          reduce using rule 29 (statement -> expression_stmt .)
    LBLOCK          reduce using rule 29 (statement -> expression_stmt .)
    IF              reduce using rule 29 (statement -> expression_stmt .)
    WHILE           reduce using rule 29 (statement -> expression_stmt .)
    FOR             reduce using rule 29 (statement -> expression_stmt .)
    RETURN          reduce using rule 29 (statement -> expression_stmt .)
    ID              reduce using rule 29 (statement -> expression_stmt .)
    LPAREN          reduce using rule 29 (statement -> expression_stmt .)
    NUMBER          reduce using rule 29 (statement -> expression_stmt .)
    ELSE            reduce using rule 29 (statement -> expression_stmt .)


state 60

    (27) statement_list -> statement_list statement .

    RBLOCK          reduce using rule 27 (statement_list -> statement_list statement .)
    LBLOCK          reduce using rule 27 (statement_list -> statement_list statement .)
    IF              reduce using rule 27 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 27 (statement_list -> statement_list statement .)
    FOR             reduce using rule 27 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 27 (statement_list -> statement_list statement .)
    ID              reduce using rule 27 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 27 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 27 (statement_list -> statement_list statement .)


state 61

    (60) term -> factor .

    TIMES           reduce using rule 60 (term -> factor .)
    DIVIDE          reduce using rule 60 (term -> factor .)
    LESS            reduce using rule 60 (term -> factor .)
    LESSEQUAL       reduce using rule 60 (term -> factor .)
    GREATER         reduce using rule 60 (term -> factor .)
    GREATEREQUAL    reduce using rule 60 (term -> factor .)
    DEQUAL          reduce using rule 60 (term -> factor .)
    DISTINT         reduce using rule 60 (term -> factor .)
    PLUS            reduce using rule 60 (term -> factor .)
    MINUS           reduce using rule 60 (term -> factor .)
    SEMICOLON       reduce using rule 60 (term -> factor .)
    RPAREN          reduce using rule 60 (term -> factor .)
    RBRACKET        reduce using rule 60 (term -> factor .)
    COMMA           reduce using rule 60 (term -> factor .)


state 62

    (41) expression -> var . EQUAL expression
    (64) factor -> var .

    EQUAL           shift and go to state 85
    TIMES           reduce using rule 64 (factor -> var .)
    DIVIDE          reduce using rule 64 (factor -> var .)
    LESS            reduce using rule 64 (factor -> var .)
    LESSEQUAL       reduce using rule 64 (factor -> var .)
    GREATER         reduce using rule 64 (factor -> var .)
    GREATEREQUAL    reduce using rule 64 (factor -> var .)
    DEQUAL          reduce using rule 64 (factor -> var .)
    DISTINT         reduce using rule 64 (factor -> var .)
    PLUS            reduce using rule 64 (factor -> var .)
    MINUS           reduce using rule 64 (factor -> var .)
    SEMICOLON       reduce using rule 64 (factor -> var .)
    COMMA           reduce using rule 64 (factor -> var .)
    RPAREN          reduce using rule 64 (factor -> var .)
    RBRACKET        reduce using rule 64 (factor -> var .)


state 63

    (31) statement -> selection_stmt .

    RBLOCK          reduce using rule 31 (statement -> selection_stmt .)
    LBLOCK          reduce using rule 31 (statement -> selection_stmt .)
    IF              reduce using rule 31 (statement -> selection_stmt .)
    WHILE           reduce using rule 31 (statement -> selection_stmt .)
    FOR             reduce using rule 31 (statement -> selection_stmt .)
    RETURN          reduce using rule 31 (statement -> selection_stmt .)
    ID              reduce using rule 31 (statement -> selection_stmt .)
    LPAREN          reduce using rule 31 (statement -> selection_stmt .)
    NUMBER          reduce using rule 31 (statement -> selection_stmt .)
    ELSE            reduce using rule 31 (statement -> selection_stmt .)


state 64

    (38) iteration_stmt -> FOR . LPAREN var_declaration expression SEMICOLON expression RPAREN statement

    LPAREN          shift and go to state 86


state 65

    (66) factor -> NUMBER .

    TIMES           reduce using rule 66 (factor -> NUMBER .)
    DIVIDE          reduce using rule 66 (factor -> NUMBER .)
    LESS            reduce using rule 66 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 66 (factor -> NUMBER .)
    GREATER         reduce using rule 66 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 66 (factor -> NUMBER .)
    DEQUAL          reduce using rule 66 (factor -> NUMBER .)
    DISTINT         reduce using rule 66 (factor -> NUMBER .)
    PLUS            reduce using rule 66 (factor -> NUMBER .)
    MINUS           reduce using rule 66 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 66 (factor -> NUMBER .)
    RPAREN          reduce using rule 66 (factor -> NUMBER .)
    RBRACKET        reduce using rule 66 (factor -> NUMBER .)
    COMMA           reduce using rule 66 (factor -> NUMBER .)


state 66

    (30) statement -> compount_stmt .

    RBLOCK          reduce using rule 30 (statement -> compount_stmt .)
    LBLOCK          reduce using rule 30 (statement -> compount_stmt .)
    IF              reduce using rule 30 (statement -> compount_stmt .)
    WHILE           reduce using rule 30 (statement -> compount_stmt .)
    FOR             reduce using rule 30 (statement -> compount_stmt .)
    RETURN          reduce using rule 30 (statement -> compount_stmt .)
    ID              reduce using rule 30 (statement -> compount_stmt .)
    LPAREN          reduce using rule 30 (statement -> compount_stmt .)
    NUMBER          reduce using rule 30 (statement -> compount_stmt .)
    ELSE            reduce using rule 30 (statement -> compount_stmt .)


state 67

    (63) factor -> LPAREN . expression RPAREN
    (41) expression -> . var EQUAL expression
    (42) expression -> . simple_expression
    (43) expression -> . ID PLUS PLUS
    (44) expression -> . ID MINUS MINUS
    (45) var -> . ID
    (46) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (59) term -> . term mulop factor
    (60) term -> . factor
    (63) factor -> . LPAREN expression RPAREN
    (64) factor -> . var
    (65) factor -> . call
    (66) factor -> . NUMBER
    (67) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 68
    LPAREN          shift and go to state 67
    NUMBER          shift and go to state 65

    term                           shift and go to state 70
    call                           shift and go to state 58
    factor                         shift and go to state 61
    var                            shift and go to state 62
    simple_expression              shift and go to state 56
    expression                     shift and go to state 87
    additive_expression            shift and go to state 57

state 68

    (43) expression -> ID . PLUS PLUS
    (44) expression -> ID . MINUS MINUS
    (45) var -> ID .
    (46) var -> ID . LBRACKET expression RBRACKET
    (67) call -> ID . LPAREN args RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 90
    MINUS           shift and go to state 88
    EQUAL           reduce using rule 45 (var -> ID .)
    TIMES           reduce using rule 45 (var -> ID .)
    DIVIDE          reduce using rule 45 (var -> ID .)
    LESS            reduce using rule 45 (var -> ID .)
    LESSEQUAL       reduce using rule 45 (var -> ID .)
    GREATER         reduce using rule 45 (var -> ID .)
    GREATEREQUAL    reduce using rule 45 (var -> ID .)
    DEQUAL          reduce using rule 45 (var -> ID .)
    DISTINT         reduce using rule 45 (var -> ID .)
    SEMICOLON       reduce using rule 45 (var -> ID .)
    RPAREN          reduce using rule 45 (var -> ID .)
    RBRACKET        reduce using rule 45 (var -> ID .)
    COMMA           reduce using rule 45 (var -> ID .)
    LBRACKET        shift and go to state 89
    LPAREN          shift and go to state 91

  ! PLUS            [ reduce using rule 45 (var -> ID .) ]
  ! MINUS           [ reduce using rule 45 (var -> ID .) ]


state 69

    (35) selection_stmt -> IF . LPAREN expression RPAREN statement
    (36) selection_stmt -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 92


state 70

    (56) additive_expression -> term .
    (59) term -> term . mulop factor
    (61) mulop -> . TIMES
    (62) mulop -> . DIVIDE

    LESS            reduce using rule 56 (additive_expression -> term .)
    LESSEQUAL       reduce using rule 56 (additive_expression -> term .)
    GREATER         reduce using rule 56 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 56 (additive_expression -> term .)
    DEQUAL          reduce using rule 56 (additive_expression -> term .)
    DISTINT         reduce using rule 56 (additive_expression -> term .)
    PLUS            reduce using rule 56 (additive_expression -> term .)
    MINUS           reduce using rule 56 (additive_expression -> term .)
    COMMA           reduce using rule 56 (additive_expression -> term .)
    RPAREN          reduce using rule 56 (additive_expression -> term .)
    SEMICOLON       reduce using rule 56 (additive_expression -> term .)
    RBRACKET        reduce using rule 56 (additive_expression -> term .)
    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94

    mulop                          shift and go to state 95

state 71

    (24) compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .

    RBLOCK          reduce using rule 24 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    LBLOCK          reduce using rule 24 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    IF              reduce using rule 24 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    WHILE           reduce using rule 24 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    FOR             reduce using rule 24 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    RETURN          reduce using rule 24 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    ID              reduce using rule 24 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    LPAREN          reduce using rule 24 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    NUMBER          reduce using rule 24 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    ELSE            reduce using rule 24 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    INT             reduce using rule 24 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    FLOAT           reduce using rule 24 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    VOID            reduce using rule 24 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    $end            reduce using rule 24 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)


state 72

    (32) statement -> iteration_stmt .

    RBLOCK          reduce using rule 32 (statement -> iteration_stmt .)
    LBLOCK          reduce using rule 32 (statement -> iteration_stmt .)
    IF              reduce using rule 32 (statement -> iteration_stmt .)
    WHILE           reduce using rule 32 (statement -> iteration_stmt .)
    FOR             reduce using rule 32 (statement -> iteration_stmt .)
    RETURN          reduce using rule 32 (statement -> iteration_stmt .)
    ID              reduce using rule 32 (statement -> iteration_stmt .)
    LPAREN          reduce using rule 32 (statement -> iteration_stmt .)
    NUMBER          reduce using rule 32 (statement -> iteration_stmt .)
    ELSE            reduce using rule 32 (statement -> iteration_stmt .)


state 73

    (34) expression_stmt -> expression . SEMICOLON

    SEMICOLON       shift and go to state 96


state 74

    (39) return_stmt -> RETURN SEMICOLON .

    RBLOCK          reduce using rule 39 (return_stmt -> RETURN SEMICOLON .)
    LBLOCK          reduce using rule 39 (return_stmt -> RETURN SEMICOLON .)
    IF              reduce using rule 39 (return_stmt -> RETURN SEMICOLON .)
    WHILE           reduce using rule 39 (return_stmt -> RETURN SEMICOLON .)
    FOR             reduce using rule 39 (return_stmt -> RETURN SEMICOLON .)
    RETURN          reduce using rule 39 (return_stmt -> RETURN SEMICOLON .)
    ID              reduce using rule 39 (return_stmt -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 39 (return_stmt -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 39 (return_stmt -> RETURN SEMICOLON .)
    ELSE            reduce using rule 39 (return_stmt -> RETURN SEMICOLON .)


state 75

    (40) return_stmt -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 97


state 76

    (37) iteration_stmt -> WHILE LPAREN . expression RPAREN statement
    (41) expression -> . var EQUAL expression
    (42) expression -> . simple_expression
    (43) expression -> . ID PLUS PLUS
    (44) expression -> . ID MINUS MINUS
    (45) var -> . ID
    (46) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (59) term -> . term mulop factor
    (60) term -> . factor
    (63) factor -> . LPAREN expression RPAREN
    (64) factor -> . var
    (65) factor -> . call
    (66) factor -> . NUMBER
    (67) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 68
    LPAREN          shift and go to state 67
    NUMBER          shift and go to state 65

    term                           shift and go to state 70
    call                           shift and go to state 58
    factor                         shift and go to state 61
    var                            shift and go to state 62
    simple_expression              shift and go to state 56
    expression                     shift and go to state 98
    additive_expression            shift and go to state 57

state 77

    (55) additive_expression -> additive_expression addop . term
    (59) term -> . term mulop factor
    (60) term -> . factor
    (63) factor -> . LPAREN expression RPAREN
    (64) factor -> . var
    (65) factor -> . call
    (66) factor -> . NUMBER
    (45) var -> . ID
    (46) var -> . ID LBRACKET expression RBRACKET
    (67) call -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 67
    NUMBER          shift and go to state 65
    ID              shift and go to state 101

    term                           shift and go to state 99
    call                           shift and go to state 58
    factor                         shift and go to state 61
    var                            shift and go to state 100

state 78

    (47) simple_expression -> additive_expression relop . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (59) term -> . term mulop factor
    (60) term -> . factor
    (63) factor -> . LPAREN expression RPAREN
    (64) factor -> . var
    (65) factor -> . call
    (66) factor -> . NUMBER
    (45) var -> . ID
    (46) var -> . ID LBRACKET expression RBRACKET
    (67) call -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 67
    NUMBER          shift and go to state 65
    ID              shift and go to state 101

    term                           shift and go to state 70
    call                           shift and go to state 58
    factor                         shift and go to state 61
    var                            shift and go to state 100
    additive_expression            shift and go to state 102

state 79

    (49) relop -> LESS .

    LPAREN          reduce using rule 49 (relop -> LESS .)
    NUMBER          reduce using rule 49 (relop -> LESS .)
    ID              reduce using rule 49 (relop -> LESS .)


state 80

    (53) relop -> DEQUAL .

    LPAREN          reduce using rule 53 (relop -> DEQUAL .)
    NUMBER          reduce using rule 53 (relop -> DEQUAL .)
    ID              reduce using rule 53 (relop -> DEQUAL .)


state 81

    (54) relop -> DISTINT .

    LPAREN          reduce using rule 54 (relop -> DISTINT .)
    NUMBER          reduce using rule 54 (relop -> DISTINT .)
    ID              reduce using rule 54 (relop -> DISTINT .)


state 82

    (52) relop -> GREATEREQUAL .

    LPAREN          reduce using rule 52 (relop -> GREATEREQUAL .)
    NUMBER          reduce using rule 52 (relop -> GREATEREQUAL .)
    ID              reduce using rule 52 (relop -> GREATEREQUAL .)


state 83

    (50) relop -> LESSEQUAL .

    LPAREN          reduce using rule 50 (relop -> LESSEQUAL .)
    NUMBER          reduce using rule 50 (relop -> LESSEQUAL .)
    ID              reduce using rule 50 (relop -> LESSEQUAL .)


state 84

    (51) relop -> GREATER .

    LPAREN          reduce using rule 51 (relop -> GREATER .)
    NUMBER          reduce using rule 51 (relop -> GREATER .)
    ID              reduce using rule 51 (relop -> GREATER .)


state 85

    (41) expression -> var EQUAL . expression
    (41) expression -> . var EQUAL expression
    (42) expression -> . simple_expression
    (43) expression -> . ID PLUS PLUS
    (44) expression -> . ID MINUS MINUS
    (45) var -> . ID
    (46) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (59) term -> . term mulop factor
    (60) term -> . factor
    (63) factor -> . LPAREN expression RPAREN
    (64) factor -> . var
    (65) factor -> . call
    (66) factor -> . NUMBER
    (67) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 68
    LPAREN          shift and go to state 67
    NUMBER          shift and go to state 65

    term                           shift and go to state 70
    call                           shift and go to state 58
    factor                         shift and go to state 61
    var                            shift and go to state 62
    simple_expression              shift and go to state 56
    expression                     shift and go to state 103
    additive_expression            shift and go to state 57

state 86

    (38) iteration_stmt -> FOR LPAREN . var_declaration expression SEMICOLON expression RPAREN statement
    (6) var_declaration -> . type_specifier ID SEMICOLON
    (7) var_declaration -> . type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
    (8) var_declaration -> . type_specifier ID EQUAL NUMBER SEMICOLON
    (9) var_declaration -> . type_specifier ID EQUAL ID addop ID SEMICOLON
    (10) var_declaration -> . type_specifier variosIDs SEMICOLON
    (13) type_specifier -> . INT
    (14) type_specifier -> . FLOAT
    (15) type_specifier -> . VOID

    INT             shift and go to state 9
    FLOAT           shift and go to state 4
    VOID            shift and go to state 3

    type_specifier                 shift and go to state 48
    var_declaration                shift and go to state 104

state 87

    (63) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 105


state 88

    (44) expression -> ID MINUS . MINUS

    MINUS           shift and go to state 106


state 89

    (46) var -> ID LBRACKET . expression RBRACKET
    (41) expression -> . var EQUAL expression
    (42) expression -> . simple_expression
    (43) expression -> . ID PLUS PLUS
    (44) expression -> . ID MINUS MINUS
    (45) var -> . ID
    (46) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (59) term -> . term mulop factor
    (60) term -> . factor
    (63) factor -> . LPAREN expression RPAREN
    (64) factor -> . var
    (65) factor -> . call
    (66) factor -> . NUMBER
    (67) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 68
    LPAREN          shift and go to state 67
    NUMBER          shift and go to state 65

    term                           shift and go to state 70
    call                           shift and go to state 58
    factor                         shift and go to state 61
    var                            shift and go to state 62
    simple_expression              shift and go to state 56
    expression                     shift and go to state 107
    additive_expression            shift and go to state 57

state 90

    (43) expression -> ID PLUS . PLUS

    PLUS            shift and go to state 108


state 91

    (67) call -> ID LPAREN . args RPAREN
    (68) args -> . args_list
    (69) args -> . empty
    (70) args_list -> . args_list COMMA expression
    (71) args_list -> . expression
    (72) empty -> .
    (41) expression -> . var EQUAL expression
    (42) expression -> . simple_expression
    (43) expression -> . ID PLUS PLUS
    (44) expression -> . ID MINUS MINUS
    (45) var -> . ID
    (46) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (59) term -> . term mulop factor
    (60) term -> . factor
    (63) factor -> . LPAREN expression RPAREN
    (64) factor -> . var
    (65) factor -> . call
    (66) factor -> . NUMBER
    (67) call -> . ID LPAREN args RPAREN

    RPAREN          reduce using rule 72 (empty -> .)
    ID              shift and go to state 68
    LPAREN          shift and go to state 67
    NUMBER          shift and go to state 65

    term                           shift and go to state 70
    args                           shift and go to state 110
    args_list                      shift and go to state 111
    call                           shift and go to state 58
    additive_expression            shift and go to state 57
    factor                         shift and go to state 61
    var                            shift and go to state 62
    simple_expression              shift and go to state 56
    expression                     shift and go to state 112
    empty                          shift and go to state 109

state 92

    (35) selection_stmt -> IF LPAREN . expression RPAREN statement
    (36) selection_stmt -> IF LPAREN . expression RPAREN statement ELSE statement
    (41) expression -> . var EQUAL expression
    (42) expression -> . simple_expression
    (43) expression -> . ID PLUS PLUS
    (44) expression -> . ID MINUS MINUS
    (45) var -> . ID
    (46) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (59) term -> . term mulop factor
    (60) term -> . factor
    (63) factor -> . LPAREN expression RPAREN
    (64) factor -> . var
    (65) factor -> . call
    (66) factor -> . NUMBER
    (67) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 68
    LPAREN          shift and go to state 67
    NUMBER          shift and go to state 65

    term                           shift and go to state 70
    call                           shift and go to state 58
    factor                         shift and go to state 61
    var                            shift and go to state 62
    simple_expression              shift and go to state 56
    expression                     shift and go to state 113
    additive_expression            shift and go to state 57

state 93

    (61) mulop -> TIMES .

    LPAREN          reduce using rule 61 (mulop -> TIMES .)
    NUMBER          reduce using rule 61 (mulop -> TIMES .)
    ID              reduce using rule 61 (mulop -> TIMES .)


state 94

    (62) mulop -> DIVIDE .

    LPAREN          reduce using rule 62 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 62 (mulop -> DIVIDE .)
    ID              reduce using rule 62 (mulop -> DIVIDE .)


state 95

    (59) term -> term mulop . factor
    (63) factor -> . LPAREN expression RPAREN
    (64) factor -> . var
    (65) factor -> . call
    (66) factor -> . NUMBER
    (45) var -> . ID
    (46) var -> . ID LBRACKET expression RBRACKET
    (67) call -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 67
    NUMBER          shift and go to state 65
    ID              shift and go to state 101

    call                           shift and go to state 58
    factor                         shift and go to state 114
    var                            shift and go to state 100

state 96

    (34) expression_stmt -> expression SEMICOLON .

    RBLOCK          reduce using rule 34 (expression_stmt -> expression SEMICOLON .)
    LBLOCK          reduce using rule 34 (expression_stmt -> expression SEMICOLON .)
    IF              reduce using rule 34 (expression_stmt -> expression SEMICOLON .)
    WHILE           reduce using rule 34 (expression_stmt -> expression SEMICOLON .)
    FOR             reduce using rule 34 (expression_stmt -> expression SEMICOLON .)
    RETURN          reduce using rule 34 (expression_stmt -> expression SEMICOLON .)
    ID              reduce using rule 34 (expression_stmt -> expression SEMICOLON .)
    LPAREN          reduce using rule 34 (expression_stmt -> expression SEMICOLON .)
    NUMBER          reduce using rule 34 (expression_stmt -> expression SEMICOLON .)
    ELSE            reduce using rule 34 (expression_stmt -> expression SEMICOLON .)


state 97

    (40) return_stmt -> RETURN expression SEMICOLON .

    RBLOCK          reduce using rule 40 (return_stmt -> RETURN expression SEMICOLON .)
    LBLOCK          reduce using rule 40 (return_stmt -> RETURN expression SEMICOLON .)
    IF              reduce using rule 40 (return_stmt -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 40 (return_stmt -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 40 (return_stmt -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 40 (return_stmt -> RETURN expression SEMICOLON .)
    ID              reduce using rule 40 (return_stmt -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 40 (return_stmt -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 40 (return_stmt -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 40 (return_stmt -> RETURN expression SEMICOLON .)


state 98

    (37) iteration_stmt -> WHILE LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 115


state 99

    (55) additive_expression -> additive_expression addop term .
    (59) term -> term . mulop factor
    (61) mulop -> . TIMES
    (62) mulop -> . DIVIDE

    LESS            reduce using rule 55 (additive_expression -> additive_expression addop term .)
    LESSEQUAL       reduce using rule 55 (additive_expression -> additive_expression addop term .)
    GREATER         reduce using rule 55 (additive_expression -> additive_expression addop term .)
    GREATEREQUAL    reduce using rule 55 (additive_expression -> additive_expression addop term .)
    DEQUAL          reduce using rule 55 (additive_expression -> additive_expression addop term .)
    DISTINT         reduce using rule 55 (additive_expression -> additive_expression addop term .)
    PLUS            reduce using rule 55 (additive_expression -> additive_expression addop term .)
    MINUS           reduce using rule 55 (additive_expression -> additive_expression addop term .)
    COMMA           reduce using rule 55 (additive_expression -> additive_expression addop term .)
    RPAREN          reduce using rule 55 (additive_expression -> additive_expression addop term .)
    SEMICOLON       reduce using rule 55 (additive_expression -> additive_expression addop term .)
    RBRACKET        reduce using rule 55 (additive_expression -> additive_expression addop term .)
    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94

    mulop                          shift and go to state 95

state 100

    (64) factor -> var .

    TIMES           reduce using rule 64 (factor -> var .)
    DIVIDE          reduce using rule 64 (factor -> var .)
    LESS            reduce using rule 64 (factor -> var .)
    LESSEQUAL       reduce using rule 64 (factor -> var .)
    GREATER         reduce using rule 64 (factor -> var .)
    GREATEREQUAL    reduce using rule 64 (factor -> var .)
    DEQUAL          reduce using rule 64 (factor -> var .)
    DISTINT         reduce using rule 64 (factor -> var .)
    PLUS            reduce using rule 64 (factor -> var .)
    MINUS           reduce using rule 64 (factor -> var .)
    SEMICOLON       reduce using rule 64 (factor -> var .)
    RPAREN          reduce using rule 64 (factor -> var .)
    RBRACKET        reduce using rule 64 (factor -> var .)
    COMMA           reduce using rule 64 (factor -> var .)


state 101

    (45) var -> ID .
    (46) var -> ID . LBRACKET expression RBRACKET
    (67) call -> ID . LPAREN args RPAREN

    TIMES           reduce using rule 45 (var -> ID .)
    DIVIDE          reduce using rule 45 (var -> ID .)
    LESS            reduce using rule 45 (var -> ID .)
    LESSEQUAL       reduce using rule 45 (var -> ID .)
    GREATER         reduce using rule 45 (var -> ID .)
    GREATEREQUAL    reduce using rule 45 (var -> ID .)
    DEQUAL          reduce using rule 45 (var -> ID .)
    DISTINT         reduce using rule 45 (var -> ID .)
    PLUS            reduce using rule 45 (var -> ID .)
    MINUS           reduce using rule 45 (var -> ID .)
    SEMICOLON       reduce using rule 45 (var -> ID .)
    RPAREN          reduce using rule 45 (var -> ID .)
    RBRACKET        reduce using rule 45 (var -> ID .)
    COMMA           reduce using rule 45 (var -> ID .)
    LBRACKET        shift and go to state 89
    LPAREN          shift and go to state 91


state 102

    (47) simple_expression -> additive_expression relop additive_expression .
    (55) additive_expression -> additive_expression . addop term
    (57) addop -> . PLUS
    (58) addop -> . MINUS

    RPAREN          reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    SEMICOLON       reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    RBRACKET        reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    COMMA           reduce using rule 47 (simple_expression -> additive_expression relop additive_expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 32

    addop                          shift and go to state 77

state 103

    (41) expression -> var EQUAL expression .

    SEMICOLON       reduce using rule 41 (expression -> var EQUAL expression .)
    RPAREN          reduce using rule 41 (expression -> var EQUAL expression .)
    RBRACKET        reduce using rule 41 (expression -> var EQUAL expression .)
    COMMA           reduce using rule 41 (expression -> var EQUAL expression .)


state 104

    (38) iteration_stmt -> FOR LPAREN var_declaration . expression SEMICOLON expression RPAREN statement
    (41) expression -> . var EQUAL expression
    (42) expression -> . simple_expression
    (43) expression -> . ID PLUS PLUS
    (44) expression -> . ID MINUS MINUS
    (45) var -> . ID
    (46) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (59) term -> . term mulop factor
    (60) term -> . factor
    (63) factor -> . LPAREN expression RPAREN
    (64) factor -> . var
    (65) factor -> . call
    (66) factor -> . NUMBER
    (67) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 68
    LPAREN          shift and go to state 67
    NUMBER          shift and go to state 65

    term                           shift and go to state 70
    call                           shift and go to state 58
    factor                         shift and go to state 61
    var                            shift and go to state 62
    simple_expression              shift and go to state 56
    expression                     shift and go to state 116
    additive_expression            shift and go to state 57

state 105

    (63) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 63 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 63 (factor -> LPAREN expression RPAREN .)


state 106

    (44) expression -> ID MINUS MINUS .

    SEMICOLON       reduce using rule 44 (expression -> ID MINUS MINUS .)
    RPAREN          reduce using rule 44 (expression -> ID MINUS MINUS .)
    RBRACKET        reduce using rule 44 (expression -> ID MINUS MINUS .)
    COMMA           reduce using rule 44 (expression -> ID MINUS MINUS .)


state 107

    (46) var -> ID LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 117


state 108

    (43) expression -> ID PLUS PLUS .

    SEMICOLON       reduce using rule 43 (expression -> ID PLUS PLUS .)
    RPAREN          reduce using rule 43 (expression -> ID PLUS PLUS .)
    RBRACKET        reduce using rule 43 (expression -> ID PLUS PLUS .)
    COMMA           reduce using rule 43 (expression -> ID PLUS PLUS .)


state 109

    (69) args -> empty .

    RPAREN          reduce using rule 69 (args -> empty .)


state 110

    (67) call -> ID LPAREN args . RPAREN

    RPAREN          shift and go to state 118


state 111

    (68) args -> args_list .
    (70) args_list -> args_list . COMMA expression

    RPAREN          reduce using rule 68 (args -> args_list .)
    COMMA           shift and go to state 119


state 112

    (71) args_list -> expression .

    COMMA           reduce using rule 71 (args_list -> expression .)
    RPAREN          reduce using rule 71 (args_list -> expression .)


state 113

    (35) selection_stmt -> IF LPAREN expression . RPAREN statement
    (36) selection_stmt -> IF LPAREN expression . RPAREN statement ELSE statement

    RPAREN          shift and go to state 120


state 114

    (59) term -> term mulop factor .

    TIMES           reduce using rule 59 (term -> term mulop factor .)
    DIVIDE          reduce using rule 59 (term -> term mulop factor .)
    LESS            reduce using rule 59 (term -> term mulop factor .)
    LESSEQUAL       reduce using rule 59 (term -> term mulop factor .)
    GREATER         reduce using rule 59 (term -> term mulop factor .)
    GREATEREQUAL    reduce using rule 59 (term -> term mulop factor .)
    DEQUAL          reduce using rule 59 (term -> term mulop factor .)
    DISTINT         reduce using rule 59 (term -> term mulop factor .)
    PLUS            reduce using rule 59 (term -> term mulop factor .)
    MINUS           reduce using rule 59 (term -> term mulop factor .)
    SEMICOLON       reduce using rule 59 (term -> term mulop factor .)
    RPAREN          reduce using rule 59 (term -> term mulop factor .)
    RBRACKET        reduce using rule 59 (term -> term mulop factor .)
    COMMA           reduce using rule 59 (term -> term mulop factor .)


state 115

    (37) iteration_stmt -> WHILE LPAREN expression RPAREN . statement
    (29) statement -> . expression_stmt
    (30) statement -> . compount_stmt
    (31) statement -> . selection_stmt
    (32) statement -> . iteration_stmt
    (33) statement -> . return_stmt
    (34) expression_stmt -> . expression SEMICOLON
    (24) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (35) selection_stmt -> . IF LPAREN expression RPAREN statement
    (36) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (37) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (38) iteration_stmt -> . FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement
    (39) return_stmt -> . RETURN SEMICOLON
    (40) return_stmt -> . RETURN expression SEMICOLON
    (41) expression -> . var EQUAL expression
    (42) expression -> . simple_expression
    (43) expression -> . ID PLUS PLUS
    (44) expression -> . ID MINUS MINUS
    (45) var -> . ID
    (46) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (59) term -> . term mulop factor
    (60) term -> . factor
    (63) factor -> . LPAREN expression RPAREN
    (64) factor -> . var
    (65) factor -> . call
    (66) factor -> . NUMBER
    (67) call -> . ID LPAREN args RPAREN

    LBLOCK          shift and go to state 43
    IF              shift and go to state 69
    WHILE           shift and go to state 54
    FOR             shift and go to state 64
    RETURN          shift and go to state 53
    ID              shift and go to state 68
    LPAREN          shift and go to state 67
    NUMBER          shift and go to state 65

    return_stmt                    shift and go to state 55
    call                           shift and go to state 58
    factor                         shift and go to state 61
    compount_stmt                  shift and go to state 66
    var                            shift and go to state 62
    expression_stmt                shift and go to state 59
    term                           shift and go to state 70
    statement                      shift and go to state 121
    selection_stmt                 shift and go to state 63
    iteration_stmt                 shift and go to state 72
    simple_expression              shift and go to state 56
    expression                     shift and go to state 73
    additive_expression            shift and go to state 57

state 116

    (38) iteration_stmt -> FOR LPAREN var_declaration expression . SEMICOLON expression RPAREN statement

    SEMICOLON       shift and go to state 122


state 117

    (46) var -> ID LBRACKET expression RBRACKET .

    EQUAL           reduce using rule 46 (var -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 46 (var -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 46 (var -> ID LBRACKET expression RBRACKET .)
    LESS            reduce using rule 46 (var -> ID LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 46 (var -> ID LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 46 (var -> ID LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 46 (var -> ID LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 46 (var -> ID LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 46 (var -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 46 (var -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 46 (var -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 46 (var -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 46 (var -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 46 (var -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 46 (var -> ID LBRACKET expression RBRACKET .)


state 118

    (67) call -> ID LPAREN args RPAREN .

    TIMES           reduce using rule 67 (call -> ID LPAREN args RPAREN .)
    DIVIDE          reduce using rule 67 (call -> ID LPAREN args RPAREN .)
    LESS            reduce using rule 67 (call -> ID LPAREN args RPAREN .)
    LESSEQUAL       reduce using rule 67 (call -> ID LPAREN args RPAREN .)
    GREATER         reduce using rule 67 (call -> ID LPAREN args RPAREN .)
    GREATEREQUAL    reduce using rule 67 (call -> ID LPAREN args RPAREN .)
    DEQUAL          reduce using rule 67 (call -> ID LPAREN args RPAREN .)
    DISTINT         reduce using rule 67 (call -> ID LPAREN args RPAREN .)
    PLUS            reduce using rule 67 (call -> ID LPAREN args RPAREN .)
    MINUS           reduce using rule 67 (call -> ID LPAREN args RPAREN .)
    SEMICOLON       reduce using rule 67 (call -> ID LPAREN args RPAREN .)
    RPAREN          reduce using rule 67 (call -> ID LPAREN args RPAREN .)
    RBRACKET        reduce using rule 67 (call -> ID LPAREN args RPAREN .)
    COMMA           reduce using rule 67 (call -> ID LPAREN args RPAREN .)


state 119

    (70) args_list -> args_list COMMA . expression
    (41) expression -> . var EQUAL expression
    (42) expression -> . simple_expression
    (43) expression -> . ID PLUS PLUS
    (44) expression -> . ID MINUS MINUS
    (45) var -> . ID
    (46) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (59) term -> . term mulop factor
    (60) term -> . factor
    (63) factor -> . LPAREN expression RPAREN
    (64) factor -> . var
    (65) factor -> . call
    (66) factor -> . NUMBER
    (67) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 68
    LPAREN          shift and go to state 67
    NUMBER          shift and go to state 65

    term                           shift and go to state 70
    call                           shift and go to state 58
    factor                         shift and go to state 61
    var                            shift and go to state 62
    simple_expression              shift and go to state 56
    expression                     shift and go to state 123
    additive_expression            shift and go to state 57

state 120

    (35) selection_stmt -> IF LPAREN expression RPAREN . statement
    (36) selection_stmt -> IF LPAREN expression RPAREN . statement ELSE statement
    (29) statement -> . expression_stmt
    (30) statement -> . compount_stmt
    (31) statement -> . selection_stmt
    (32) statement -> . iteration_stmt
    (33) statement -> . return_stmt
    (34) expression_stmt -> . expression SEMICOLON
    (24) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (35) selection_stmt -> . IF LPAREN expression RPAREN statement
    (36) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (37) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (38) iteration_stmt -> . FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement
    (39) return_stmt -> . RETURN SEMICOLON
    (40) return_stmt -> . RETURN expression SEMICOLON
    (41) expression -> . var EQUAL expression
    (42) expression -> . simple_expression
    (43) expression -> . ID PLUS PLUS
    (44) expression -> . ID MINUS MINUS
    (45) var -> . ID
    (46) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (59) term -> . term mulop factor
    (60) term -> . factor
    (63) factor -> . LPAREN expression RPAREN
    (64) factor -> . var
    (65) factor -> . call
    (66) factor -> . NUMBER
    (67) call -> . ID LPAREN args RPAREN

    LBLOCK          shift and go to state 43
    IF              shift and go to state 69
    WHILE           shift and go to state 54
    FOR             shift and go to state 64
    RETURN          shift and go to state 53
    ID              shift and go to state 68
    LPAREN          shift and go to state 67
    NUMBER          shift and go to state 65

    return_stmt                    shift and go to state 55
    call                           shift and go to state 58
    factor                         shift and go to state 61
    compount_stmt                  shift and go to state 66
    var                            shift and go to state 62
    expression_stmt                shift and go to state 59
    term                           shift and go to state 70
    statement                      shift and go to state 124
    selection_stmt                 shift and go to state 63
    iteration_stmt                 shift and go to state 72
    simple_expression              shift and go to state 56
    expression                     shift and go to state 73
    additive_expression            shift and go to state 57

state 121

    (37) iteration_stmt -> WHILE LPAREN expression RPAREN statement .

    RBLOCK          reduce using rule 37 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 37 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 37 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 37 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 37 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 37 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 37 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 37 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 37 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 37 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)


state 122

    (38) iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON . expression RPAREN statement
    (41) expression -> . var EQUAL expression
    (42) expression -> . simple_expression
    (43) expression -> . ID PLUS PLUS
    (44) expression -> . ID MINUS MINUS
    (45) var -> . ID
    (46) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (59) term -> . term mulop factor
    (60) term -> . factor
    (63) factor -> . LPAREN expression RPAREN
    (64) factor -> . var
    (65) factor -> . call
    (66) factor -> . NUMBER
    (67) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 68
    LPAREN          shift and go to state 67
    NUMBER          shift and go to state 65

    term                           shift and go to state 70
    call                           shift and go to state 58
    factor                         shift and go to state 61
    var                            shift and go to state 62
    simple_expression              shift and go to state 56
    expression                     shift and go to state 125
    additive_expression            shift and go to state 57

state 123

    (70) args_list -> args_list COMMA expression .

    COMMA           reduce using rule 70 (args_list -> args_list COMMA expression .)
    RPAREN          reduce using rule 70 (args_list -> args_list COMMA expression .)


state 124

    (35) selection_stmt -> IF LPAREN expression RPAREN statement .
    (36) selection_stmt -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBLOCK          reduce using rule 35 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 35 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 35 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 35 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 35 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 35 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 35 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 35 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 35 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 126

  ! ELSE            [ reduce using rule 35 (selection_stmt -> IF LPAREN expression RPAREN statement .) ]


state 125

    (38) iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression . RPAREN statement

    RPAREN          shift and go to state 127


state 126

    (36) selection_stmt -> IF LPAREN expression RPAREN statement ELSE . statement
    (29) statement -> . expression_stmt
    (30) statement -> . compount_stmt
    (31) statement -> . selection_stmt
    (32) statement -> . iteration_stmt
    (33) statement -> . return_stmt
    (34) expression_stmt -> . expression SEMICOLON
    (24) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (35) selection_stmt -> . IF LPAREN expression RPAREN statement
    (36) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (37) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (38) iteration_stmt -> . FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement
    (39) return_stmt -> . RETURN SEMICOLON
    (40) return_stmt -> . RETURN expression SEMICOLON
    (41) expression -> . var EQUAL expression
    (42) expression -> . simple_expression
    (43) expression -> . ID PLUS PLUS
    (44) expression -> . ID MINUS MINUS
    (45) var -> . ID
    (46) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (59) term -> . term mulop factor
    (60) term -> . factor
    (63) factor -> . LPAREN expression RPAREN
    (64) factor -> . var
    (65) factor -> . call
    (66) factor -> . NUMBER
    (67) call -> . ID LPAREN args RPAREN

    LBLOCK          shift and go to state 43
    IF              shift and go to state 69
    WHILE           shift and go to state 54
    FOR             shift and go to state 64
    RETURN          shift and go to state 53
    ID              shift and go to state 68
    LPAREN          shift and go to state 67
    NUMBER          shift and go to state 65

    return_stmt                    shift and go to state 55
    call                           shift and go to state 58
    factor                         shift and go to state 61
    compount_stmt                  shift and go to state 66
    var                            shift and go to state 62
    expression_stmt                shift and go to state 59
    term                           shift and go to state 70
    statement                      shift and go to state 128
    selection_stmt                 shift and go to state 63
    iteration_stmt                 shift and go to state 72
    simple_expression              shift and go to state 56
    expression                     shift and go to state 73
    additive_expression            shift and go to state 57

state 127

    (38) iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN . statement
    (29) statement -> . expression_stmt
    (30) statement -> . compount_stmt
    (31) statement -> . selection_stmt
    (32) statement -> . iteration_stmt
    (33) statement -> . return_stmt
    (34) expression_stmt -> . expression SEMICOLON
    (24) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (35) selection_stmt -> . IF LPAREN expression RPAREN statement
    (36) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (37) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (38) iteration_stmt -> . FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement
    (39) return_stmt -> . RETURN SEMICOLON
    (40) return_stmt -> . RETURN expression SEMICOLON
    (41) expression -> . var EQUAL expression
    (42) expression -> . simple_expression
    (43) expression -> . ID PLUS PLUS
    (44) expression -> . ID MINUS MINUS
    (45) var -> . ID
    (46) var -> . ID LBRACKET expression RBRACKET
    (47) simple_expression -> . additive_expression relop additive_expression
    (48) simple_expression -> . additive_expression
    (55) additive_expression -> . additive_expression addop term
    (56) additive_expression -> . term
    (59) term -> . term mulop factor
    (60) term -> . factor
    (63) factor -> . LPAREN expression RPAREN
    (64) factor -> . var
    (65) factor -> . call
    (66) factor -> . NUMBER
    (67) call -> . ID LPAREN args RPAREN

    LBLOCK          shift and go to state 43
    IF              shift and go to state 69
    WHILE           shift and go to state 54
    FOR             shift and go to state 64
    RETURN          shift and go to state 53
    ID              shift and go to state 68
    LPAREN          shift and go to state 67
    NUMBER          shift and go to state 65

    term                           shift and go to state 70
    return_stmt                    shift and go to state 55
    call                           shift and go to state 58
    factor                         shift and go to state 61
    compount_stmt                  shift and go to state 66
    iteration_stmt                 shift and go to state 72
    var                            shift and go to state 62
    expression_stmt                shift and go to state 59
    statement                      shift and go to state 129
    selection_stmt                 shift and go to state 63
    simple_expression              shift and go to state 56
    expression                     shift and go to state 73
    additive_expression            shift and go to state 57

state 128

    (36) selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .

    RBLOCK          reduce using rule 36 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBLOCK          reduce using rule 36 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 36 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 36 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 36 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 36 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 36 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 36 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 36 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 36 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)


state 129

    (38) iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement .

    RBLOCK          reduce using rule 38 (iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement .)
    LBLOCK          reduce using rule 38 (iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement .)
    IF              reduce using rule 38 (iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement .)
    WHILE           reduce using rule 38 (iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement .)
    FOR             reduce using rule 38 (iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement .)
    RETURN          reduce using rule 38 (iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement .)
    ID              reduce using rule 38 (iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement .)
    LPAREN          reduce using rule 38 (iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement .)
    NUMBER          reduce using rule 38 (iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement .)
    ELSE            reduce using rule 38 (iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 11 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 52 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 68 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 124 resolved as shift
