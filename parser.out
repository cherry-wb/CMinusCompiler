Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> declaration_list
Rule 2     declaration_list -> declaration_list declaration
Rule 3     declaration_list -> declaration
Rule 4     declaration -> var_declaration
Rule 5     declaration -> fun_declaration
Rule 6     var_declaration -> type_specifier ID SEMICOLON
Rule 7     var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
Rule 8     var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON
Rule 9     var_declaration -> type_specifier variosIDs SEMICOLON
Rule 10    variosIDs -> ID COMMA variosIDs
Rule 11    variosIDs -> ID
Rule 12    type_specifier -> INT
Rule 13    type_specifier -> FLOAT
Rule 14    type_specifier -> VOID
Rule 15    fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt
Rule 16    params -> param_list
Rule 17    params -> VOID
Rule 18    param_list -> param_list COMMA param
Rule 19    param_list -> param
Rule 20    param_list -> empty
Rule 21    param -> type_specifier ID
Rule 22    param -> type_specifier ID LBRACKET RBRACKET
Rule 23    compount_stmt -> LBLOCK local_declarations statement_list RBLOCK
Rule 24    local_declarations -> local_declarations var_declaration
Rule 25    local_declarations -> empty
Rule 26    statement_list -> statement_list statement
Rule 27    statement_list -> empty
Rule 28    statement -> expression_stmt
Rule 29    statement -> compount_stmt
Rule 30    statement -> selection_stmt
Rule 31    statement -> iteration_stmt
Rule 32    statement -> return_stmt
Rule 33    expression_stmt -> expression SEMICOLON
Rule 34    selection_stmt -> IF LPAREN expression RPAREN statement
Rule 35    selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement
Rule 36    iteration_stmt -> WHILE LPAREN expression RPAREN statement
Rule 37    iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement
Rule 38    return_stmt -> RETURN SEMICOLON
Rule 39    return_stmt -> RETURN expression SEMICOLON
Rule 40    expression -> var EQUAL expression
Rule 41    expression -> simple_expression
Rule 42    expression -> ID PLUS PLUS
Rule 43    expression -> ID MINUS MINUS
Rule 44    var -> ID
Rule 45    var -> ID LBRACKET expression RBRACKET
Rule 46    simple_expression -> additive_expression relop additive_expression
Rule 47    simple_expression -> additive_expression
Rule 48    relop -> LESS
Rule 49    relop -> LESSEQUAL
Rule 50    relop -> GREATER
Rule 51    relop -> GREATEREQUAL
Rule 52    relop -> DEQUAL
Rule 53    relop -> DISTINT
Rule 54    additive_expression -> additive_expression addop term
Rule 55    additive_expression -> term
Rule 56    addop -> PLUS
Rule 57    addop -> MINUS
Rule 58    term -> term mulop factor
Rule 59    term -> factor
Rule 60    mulop -> TIMES
Rule 61    mulop -> DIVIDE
Rule 62    factor -> LPAREN expression RPAREN
Rule 63    factor -> var
Rule 64    factor -> call
Rule 65    factor -> NUMBER
Rule 66    call -> ID LPAREN args RPAREN
Rule 67    args -> args_list
Rule 68    args -> empty
Rule 69    args_list -> args_list COMMA expression
Rule 70    args_list -> expression
Rule 71    empty -> <empty>

Terminals, with rules where they appear

COMMA                : 10 18 69
DEQUAL               : 52
DISTINT              : 53
DIVIDE               : 61
ELSE                 : 35
EQUAL                : 8 40
FLOAT                : 13
FOR                  : 37
GREATER              : 50
GREATEREQUAL         : 51
ID                   : 6 7 8 10 11 15 21 22 42 43 44 45 66
IF                   : 34 35
INT                  : 12
LBLOCK               : 23
LBRACKET             : 7 22 45
LESS                 : 48
LESSEQUAL            : 49
LPAREN               : 15 34 35 36 37 62 66
MINUS                : 43 43 57
NUMBER               : 7 8 65
PLUS                 : 42 42 56
RBLOCK               : 23
RBRACKET             : 7 22 45
RETURN               : 38 39
RPAREN               : 15 34 35 36 37 62 66
SEMICOLON            : 6 7 8 9 33 37 38 39
TIMES                : 60
VOID                 : 14 17
WHILE                : 36
error                : 

Nonterminals, with rules where they appear

additive_expression  : 46 46 47 54
addop                : 54
args                 : 66
args_list            : 67 69
call                 : 64
compount_stmt        : 15 29
declaration          : 2 3
declaration_list     : 1 2
empty                : 20 25 27 68
expression           : 33 34 35 36 37 37 39 40 45 62 69 70
expression_stmt      : 28
factor               : 58 59
fun_declaration      : 5
iteration_stmt       : 31
local_declarations   : 23 24
mulop                : 58
param                : 18 19
param_list           : 16 18
params               : 15
program              : 0
relop                : 46
return_stmt          : 32
selection_stmt       : 30
simple_expression    : 41
statement            : 26 34 35 35 36 37
statement_list       : 23 26
term                 : 54 55 58
type_specifier       : 6 7 8 9 15 21 22
var                  : 40 63
var_declaration      : 4 24 37
variosIDs            : 9 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declaration_list
    (2) declaration_list -> . declaration_list declaration
    (3) declaration_list -> . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . fun_declaration
    (6) var_declaration -> . type_specifier ID SEMICOLON
    (7) var_declaration -> . type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
    (8) var_declaration -> . type_specifier ID EQUAL NUMBER SEMICOLON
    (9) var_declaration -> . type_specifier variosIDs SEMICOLON
    (15) fun_declaration -> . type_specifier ID LPAREN params RPAREN compount_stmt
    (12) type_specifier -> . INT
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . VOID

    INT             shift and go to state 9
    FLOAT           shift and go to state 4
    VOID            shift and go to state 3

    type_specifier                 shift and go to state 1
    fun_declaration                shift and go to state 2
    declaration_list               shift and go to state 5
    var_declaration                shift and go to state 6
    program                        shift and go to state 7
    declaration                    shift and go to state 8

state 1

    (6) var_declaration -> type_specifier . ID SEMICOLON
    (7) var_declaration -> type_specifier . ID LBRACKET NUMBER RBRACKET SEMICOLON
    (8) var_declaration -> type_specifier . ID EQUAL NUMBER SEMICOLON
    (9) var_declaration -> type_specifier . variosIDs SEMICOLON
    (15) fun_declaration -> type_specifier . ID LPAREN params RPAREN compount_stmt
    (10) variosIDs -> . ID COMMA variosIDs
    (11) variosIDs -> . ID

    ID              shift and go to state 11

    variosIDs                      shift and go to state 10

state 2

    (5) declaration -> fun_declaration .

    INT             reduce using rule 5 (declaration -> fun_declaration .)
    FLOAT           reduce using rule 5 (declaration -> fun_declaration .)
    VOID            reduce using rule 5 (declaration -> fun_declaration .)
    $end            reduce using rule 5 (declaration -> fun_declaration .)


state 3

    (14) type_specifier -> VOID .

    ID              reduce using rule 14 (type_specifier -> VOID .)


state 4

    (13) type_specifier -> FLOAT .

    ID              reduce using rule 13 (type_specifier -> FLOAT .)


state 5

    (1) program -> declaration_list .
    (2) declaration_list -> declaration_list . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . fun_declaration
    (6) var_declaration -> . type_specifier ID SEMICOLON
    (7) var_declaration -> . type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
    (8) var_declaration -> . type_specifier ID EQUAL NUMBER SEMICOLON
    (9) var_declaration -> . type_specifier variosIDs SEMICOLON
    (15) fun_declaration -> . type_specifier ID LPAREN params RPAREN compount_stmt
    (12) type_specifier -> . INT
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . VOID

    $end            reduce using rule 1 (program -> declaration_list .)
    INT             shift and go to state 9
    FLOAT           shift and go to state 4
    VOID            shift and go to state 3

    type_specifier                 shift and go to state 1
    fun_declaration                shift and go to state 2
    var_declaration                shift and go to state 6
    declaration                    shift and go to state 12

state 6

    (4) declaration -> var_declaration .

    INT             reduce using rule 4 (declaration -> var_declaration .)
    FLOAT           reduce using rule 4 (declaration -> var_declaration .)
    VOID            reduce using rule 4 (declaration -> var_declaration .)
    $end            reduce using rule 4 (declaration -> var_declaration .)


state 7

    (0) S' -> program .



state 8

    (3) declaration_list -> declaration .

    INT             reduce using rule 3 (declaration_list -> declaration .)
    FLOAT           reduce using rule 3 (declaration_list -> declaration .)
    VOID            reduce using rule 3 (declaration_list -> declaration .)
    $end            reduce using rule 3 (declaration_list -> declaration .)


state 9

    (12) type_specifier -> INT .

    ID              reduce using rule 12 (type_specifier -> INT .)


state 10

    (9) var_declaration -> type_specifier variosIDs . SEMICOLON

    SEMICOLON       shift and go to state 13


state 11

    (6) var_declaration -> type_specifier ID . SEMICOLON
    (7) var_declaration -> type_specifier ID . LBRACKET NUMBER RBRACKET SEMICOLON
    (8) var_declaration -> type_specifier ID . EQUAL NUMBER SEMICOLON
    (15) fun_declaration -> type_specifier ID . LPAREN params RPAREN compount_stmt
    (10) variosIDs -> ID . COMMA variosIDs
    (11) variosIDs -> ID .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 14
    LBRACKET        shift and go to state 16
    EQUAL           shift and go to state 15
    LPAREN          shift and go to state 17
    COMMA           shift and go to state 18

  ! SEMICOLON       [ reduce using rule 11 (variosIDs -> ID .) ]


state 12

    (2) declaration_list -> declaration_list declaration .

    INT             reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 2 (declaration_list -> declaration_list declaration .)
    $end            reduce using rule 2 (declaration_list -> declaration_list declaration .)


state 13

    (9) var_declaration -> type_specifier variosIDs SEMICOLON .

    INT             reduce using rule 9 (var_declaration -> type_specifier variosIDs SEMICOLON .)
    FLOAT           reduce using rule 9 (var_declaration -> type_specifier variosIDs SEMICOLON .)
    VOID            reduce using rule 9 (var_declaration -> type_specifier variosIDs SEMICOLON .)
    $end            reduce using rule 9 (var_declaration -> type_specifier variosIDs SEMICOLON .)
    ID              reduce using rule 9 (var_declaration -> type_specifier variosIDs SEMICOLON .)
    LPAREN          reduce using rule 9 (var_declaration -> type_specifier variosIDs SEMICOLON .)
    NUMBER          reduce using rule 9 (var_declaration -> type_specifier variosIDs SEMICOLON .)
    RBLOCK          reduce using rule 9 (var_declaration -> type_specifier variosIDs SEMICOLON .)
    LBLOCK          reduce using rule 9 (var_declaration -> type_specifier variosIDs SEMICOLON .)
    IF              reduce using rule 9 (var_declaration -> type_specifier variosIDs SEMICOLON .)
    WHILE           reduce using rule 9 (var_declaration -> type_specifier variosIDs SEMICOLON .)
    FOR             reduce using rule 9 (var_declaration -> type_specifier variosIDs SEMICOLON .)
    RETURN          reduce using rule 9 (var_declaration -> type_specifier variosIDs SEMICOLON .)


state 14

    (6) var_declaration -> type_specifier ID SEMICOLON .

    INT             reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    FLOAT           reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    VOID            reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    $end            reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    ID              reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    LPAREN          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    NUMBER          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    RBLOCK          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    LBLOCK          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    IF              reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    WHILE           reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    FOR             reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    RETURN          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)


state 15

    (8) var_declaration -> type_specifier ID EQUAL . NUMBER SEMICOLON

    NUMBER          shift and go to state 19


state 16

    (7) var_declaration -> type_specifier ID LBRACKET . NUMBER RBRACKET SEMICOLON

    NUMBER          shift and go to state 20


state 17

    (15) fun_declaration -> type_specifier ID LPAREN . params RPAREN compount_stmt
    (16) params -> . param_list
    (17) params -> . VOID
    (18) param_list -> . param_list COMMA param
    (19) param_list -> . param
    (20) param_list -> . empty
    (21) param -> . type_specifier ID
    (22) param -> . type_specifier ID LBRACKET RBRACKET
    (71) empty -> .
    (12) type_specifier -> . INT
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . VOID

    VOID            shift and go to state 23
    COMMA           reduce using rule 71 (empty -> .)
    RPAREN          reduce using rule 71 (empty -> .)
    INT             shift and go to state 9
    FLOAT           shift and go to state 4

    type_specifier                 shift and go to state 21
    param_list                     shift and go to state 22
    param                          shift and go to state 24
    params                         shift and go to state 25
    empty                          shift and go to state 26

state 18

    (10) variosIDs -> ID COMMA . variosIDs
    (10) variosIDs -> . ID COMMA variosIDs
    (11) variosIDs -> . ID

    ID              shift and go to state 27

    variosIDs                      shift and go to state 28

state 19

    (8) var_declaration -> type_specifier ID EQUAL NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 29


state 20

    (7) var_declaration -> type_specifier ID LBRACKET NUMBER . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 30


state 21

    (21) param -> type_specifier . ID
    (22) param -> type_specifier . ID LBRACKET RBRACKET

    ID              shift and go to state 31


state 22

    (16) params -> param_list .
    (18) param_list -> param_list . COMMA param

    RPAREN          reduce using rule 16 (params -> param_list .)
    COMMA           shift and go to state 32


state 23

    (17) params -> VOID .
    (14) type_specifier -> VOID .

    RPAREN          reduce using rule 17 (params -> VOID .)
    ID              reduce using rule 14 (type_specifier -> VOID .)


state 24

    (19) param_list -> param .

    COMMA           reduce using rule 19 (param_list -> param .)
    RPAREN          reduce using rule 19 (param_list -> param .)


state 25

    (15) fun_declaration -> type_specifier ID LPAREN params . RPAREN compount_stmt

    RPAREN          shift and go to state 33


state 26

    (20) param_list -> empty .

    COMMA           reduce using rule 20 (param_list -> empty .)
    RPAREN          reduce using rule 20 (param_list -> empty .)


state 27

    (10) variosIDs -> ID . COMMA variosIDs
    (11) variosIDs -> ID .

    COMMA           shift and go to state 18
    SEMICOLON       reduce using rule 11 (variosIDs -> ID .)


state 28

    (10) variosIDs -> ID COMMA variosIDs .

    SEMICOLON       reduce using rule 10 (variosIDs -> ID COMMA variosIDs .)


state 29

    (8) var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .

    INT             reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    FLOAT           reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    VOID            reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    $end            reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    ID              reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    LPAREN          reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    NUMBER          reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    RBLOCK          reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    LBLOCK          reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    IF              reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    WHILE           reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    FOR             reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    RETURN          reduce using rule 8 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)


state 30

    (7) var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 34


state 31

    (21) param -> type_specifier ID .
    (22) param -> type_specifier ID . LBRACKET RBRACKET

    COMMA           reduce using rule 21 (param -> type_specifier ID .)
    RPAREN          reduce using rule 21 (param -> type_specifier ID .)
    LBRACKET        shift and go to state 35


state 32

    (18) param_list -> param_list COMMA . param
    (21) param -> . type_specifier ID
    (22) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . VOID

    INT             shift and go to state 9
    FLOAT           shift and go to state 4
    VOID            shift and go to state 3

    type_specifier                 shift and go to state 21
    param                          shift and go to state 36

state 33

    (15) fun_declaration -> type_specifier ID LPAREN params RPAREN . compount_stmt
    (23) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK

    LBLOCK          shift and go to state 38

    compount_stmt                  shift and go to state 37

state 34

    (7) var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .

    INT             reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    VOID            reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    $end            reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    ID              reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    RBLOCK          reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    LBLOCK          reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    IF              reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    WHILE           reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    FOR             reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    RETURN          reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)


state 35

    (22) param -> type_specifier ID LBRACKET . RBRACKET

    RBRACKET        shift and go to state 39


state 36

    (18) param_list -> param_list COMMA param .

    COMMA           reduce using rule 18 (param_list -> param_list COMMA param .)
    RPAREN          reduce using rule 18 (param_list -> param_list COMMA param .)


state 37

    (15) fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .

    INT             reduce using rule 15 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)
    FLOAT           reduce using rule 15 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)
    VOID            reduce using rule 15 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)
    $end            reduce using rule 15 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)


state 38

    (23) compount_stmt -> LBLOCK . local_declarations statement_list RBLOCK
    (24) local_declarations -> . local_declarations var_declaration
    (25) local_declarations -> . empty
    (71) empty -> .

    INT             reduce using rule 71 (empty -> .)
    FLOAT           reduce using rule 71 (empty -> .)
    VOID            reduce using rule 71 (empty -> .)
    RBLOCK          reduce using rule 71 (empty -> .)
    LBLOCK          reduce using rule 71 (empty -> .)
    IF              reduce using rule 71 (empty -> .)
    WHILE           reduce using rule 71 (empty -> .)
    FOR             reduce using rule 71 (empty -> .)
    RETURN          reduce using rule 71 (empty -> .)
    ID              reduce using rule 71 (empty -> .)
    LPAREN          reduce using rule 71 (empty -> .)
    NUMBER          reduce using rule 71 (empty -> .)

    local_declarations             shift and go to state 40
    empty                          shift and go to state 41

state 39

    (22) param -> type_specifier ID LBRACKET RBRACKET .

    COMMA           reduce using rule 22 (param -> type_specifier ID LBRACKET RBRACKET .)
    RPAREN          reduce using rule 22 (param -> type_specifier ID LBRACKET RBRACKET .)


state 40

    (23) compount_stmt -> LBLOCK local_declarations . statement_list RBLOCK
    (24) local_declarations -> local_declarations . var_declaration
    (26) statement_list -> . statement_list statement
    (27) statement_list -> . empty
    (6) var_declaration -> . type_specifier ID SEMICOLON
    (7) var_declaration -> . type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
    (8) var_declaration -> . type_specifier ID EQUAL NUMBER SEMICOLON
    (9) var_declaration -> . type_specifier variosIDs SEMICOLON
    (71) empty -> .
    (12) type_specifier -> . INT
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . VOID

    RBLOCK          reduce using rule 71 (empty -> .)
    LBLOCK          reduce using rule 71 (empty -> .)
    IF              reduce using rule 71 (empty -> .)
    WHILE           reduce using rule 71 (empty -> .)
    FOR             reduce using rule 71 (empty -> .)
    RETURN          reduce using rule 71 (empty -> .)
    ID              reduce using rule 71 (empty -> .)
    LPAREN          reduce using rule 71 (empty -> .)
    NUMBER          reduce using rule 71 (empty -> .)
    INT             shift and go to state 9
    FLOAT           shift and go to state 4
    VOID            shift and go to state 3

    type_specifier                 shift and go to state 42
    var_declaration                shift and go to state 43
    statement_list                 shift and go to state 44
    empty                          shift and go to state 45

state 41

    (25) local_declarations -> empty .

    INT             reduce using rule 25 (local_declarations -> empty .)
    FLOAT           reduce using rule 25 (local_declarations -> empty .)
    VOID            reduce using rule 25 (local_declarations -> empty .)
    RBLOCK          reduce using rule 25 (local_declarations -> empty .)
    LBLOCK          reduce using rule 25 (local_declarations -> empty .)
    IF              reduce using rule 25 (local_declarations -> empty .)
    WHILE           reduce using rule 25 (local_declarations -> empty .)
    FOR             reduce using rule 25 (local_declarations -> empty .)
    RETURN          reduce using rule 25 (local_declarations -> empty .)
    ID              reduce using rule 25 (local_declarations -> empty .)
    LPAREN          reduce using rule 25 (local_declarations -> empty .)
    NUMBER          reduce using rule 25 (local_declarations -> empty .)


state 42

    (6) var_declaration -> type_specifier . ID SEMICOLON
    (7) var_declaration -> type_specifier . ID LBRACKET NUMBER RBRACKET SEMICOLON
    (8) var_declaration -> type_specifier . ID EQUAL NUMBER SEMICOLON
    (9) var_declaration -> type_specifier . variosIDs SEMICOLON
    (10) variosIDs -> . ID COMMA variosIDs
    (11) variosIDs -> . ID

    ID              shift and go to state 46

    variosIDs                      shift and go to state 10

state 43

    (24) local_declarations -> local_declarations var_declaration .

    INT             reduce using rule 24 (local_declarations -> local_declarations var_declaration .)
    FLOAT           reduce using rule 24 (local_declarations -> local_declarations var_declaration .)
    VOID            reduce using rule 24 (local_declarations -> local_declarations var_declaration .)
    RBLOCK          reduce using rule 24 (local_declarations -> local_declarations var_declaration .)
    LBLOCK          reduce using rule 24 (local_declarations -> local_declarations var_declaration .)
    IF              reduce using rule 24 (local_declarations -> local_declarations var_declaration .)
    WHILE           reduce using rule 24 (local_declarations -> local_declarations var_declaration .)
    FOR             reduce using rule 24 (local_declarations -> local_declarations var_declaration .)
    RETURN          reduce using rule 24 (local_declarations -> local_declarations var_declaration .)
    ID              reduce using rule 24 (local_declarations -> local_declarations var_declaration .)
    LPAREN          reduce using rule 24 (local_declarations -> local_declarations var_declaration .)
    NUMBER          reduce using rule 24 (local_declarations -> local_declarations var_declaration .)


state 44

    (23) compount_stmt -> LBLOCK local_declarations statement_list . RBLOCK
    (26) statement_list -> statement_list . statement
    (28) statement -> . expression_stmt
    (29) statement -> . compount_stmt
    (30) statement -> . selection_stmt
    (31) statement -> . iteration_stmt
    (32) statement -> . return_stmt
    (33) expression_stmt -> . expression SEMICOLON
    (23) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (34) selection_stmt -> . IF LPAREN expression RPAREN statement
    (35) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (36) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (37) iteration_stmt -> . FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement
    (38) return_stmt -> . RETURN SEMICOLON
    (39) return_stmt -> . RETURN expression SEMICOLON
    (40) expression -> . var EQUAL expression
    (41) expression -> . simple_expression
    (42) expression -> . ID PLUS PLUS
    (43) expression -> . ID MINUS MINUS
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (58) term -> . term mulop factor
    (59) term -> . factor
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . var
    (64) factor -> . call
    (65) factor -> . NUMBER
    (66) call -> . ID LPAREN args RPAREN

    RBLOCK          shift and go to state 65
    LBLOCK          shift and go to state 38
    IF              shift and go to state 63
    WHILE           shift and go to state 48
    FOR             shift and go to state 58
    RETURN          shift and go to state 47
    ID              shift and go to state 62
    LPAREN          shift and go to state 61
    NUMBER          shift and go to state 59

    term                           shift and go to state 64
    return_stmt                    shift and go to state 49
    call                           shift and go to state 52
    factor                         shift and go to state 55
    compount_stmt                  shift and go to state 60
    iteration_stmt                 shift and go to state 66
    var                            shift and go to state 56
    expression_stmt                shift and go to state 53
    statement                      shift and go to state 54
    selection_stmt                 shift and go to state 57
    simple_expression              shift and go to state 50
    expression                     shift and go to state 67
    additive_expression            shift and go to state 51

state 45

    (27) statement_list -> empty .

    RBLOCK          reduce using rule 27 (statement_list -> empty .)
    LBLOCK          reduce using rule 27 (statement_list -> empty .)
    IF              reduce using rule 27 (statement_list -> empty .)
    WHILE           reduce using rule 27 (statement_list -> empty .)
    FOR             reduce using rule 27 (statement_list -> empty .)
    RETURN          reduce using rule 27 (statement_list -> empty .)
    ID              reduce using rule 27 (statement_list -> empty .)
    LPAREN          reduce using rule 27 (statement_list -> empty .)
    NUMBER          reduce using rule 27 (statement_list -> empty .)


state 46

    (6) var_declaration -> type_specifier ID . SEMICOLON
    (7) var_declaration -> type_specifier ID . LBRACKET NUMBER RBRACKET SEMICOLON
    (8) var_declaration -> type_specifier ID . EQUAL NUMBER SEMICOLON
    (10) variosIDs -> ID . COMMA variosIDs
    (11) variosIDs -> ID .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 14
    LBRACKET        shift and go to state 16
    EQUAL           shift and go to state 15
    COMMA           shift and go to state 18

  ! SEMICOLON       [ reduce using rule 11 (variosIDs -> ID .) ]


state 47

    (38) return_stmt -> RETURN . SEMICOLON
    (39) return_stmt -> RETURN . expression SEMICOLON
    (40) expression -> . var EQUAL expression
    (41) expression -> . simple_expression
    (42) expression -> . ID PLUS PLUS
    (43) expression -> . ID MINUS MINUS
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (58) term -> . term mulop factor
    (59) term -> . factor
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . var
    (64) factor -> . call
    (65) factor -> . NUMBER
    (66) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 68
    ID              shift and go to state 62
    LPAREN          shift and go to state 61
    NUMBER          shift and go to state 59

    term                           shift and go to state 64
    call                           shift and go to state 52
    factor                         shift and go to state 55
    var                            shift and go to state 56
    simple_expression              shift and go to state 50
    expression                     shift and go to state 69
    additive_expression            shift and go to state 51

state 48

    (36) iteration_stmt -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 70


state 49

    (32) statement -> return_stmt .

    RBLOCK          reduce using rule 32 (statement -> return_stmt .)
    LBLOCK          reduce using rule 32 (statement -> return_stmt .)
    IF              reduce using rule 32 (statement -> return_stmt .)
    WHILE           reduce using rule 32 (statement -> return_stmt .)
    FOR             reduce using rule 32 (statement -> return_stmt .)
    RETURN          reduce using rule 32 (statement -> return_stmt .)
    ID              reduce using rule 32 (statement -> return_stmt .)
    LPAREN          reduce using rule 32 (statement -> return_stmt .)
    NUMBER          reduce using rule 32 (statement -> return_stmt .)
    ELSE            reduce using rule 32 (statement -> return_stmt .)


state 50

    (41) expression -> simple_expression .

    RPAREN          reduce using rule 41 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 41 (expression -> simple_expression .)
    RBRACKET        reduce using rule 41 (expression -> simple_expression .)
    COMMA           reduce using rule 41 (expression -> simple_expression .)


state 51

    (46) simple_expression -> additive_expression . relop additive_expression
    (47) simple_expression -> additive_expression .
    (54) additive_expression -> additive_expression . addop term
    (48) relop -> . LESS
    (49) relop -> . LESSEQUAL
    (50) relop -> . GREATER
    (51) relop -> . GREATEREQUAL
    (52) relop -> . DEQUAL
    (53) relop -> . DISTINT
    (56) addop -> . PLUS
    (57) addop -> . MINUS

    SEMICOLON       reduce using rule 47 (simple_expression -> additive_expression .)
    COMMA           reduce using rule 47 (simple_expression -> additive_expression .)
    RPAREN          reduce using rule 47 (simple_expression -> additive_expression .)
    RBRACKET        reduce using rule 47 (simple_expression -> additive_expression .)
    LESS            shift and go to state 73
    LESSEQUAL       shift and go to state 78
    GREATER         shift and go to state 80
    GREATEREQUAL    shift and go to state 76
    DEQUAL          shift and go to state 74
    DISTINT         shift and go to state 75
    PLUS            shift and go to state 77
    MINUS           shift and go to state 79

    addop                          shift and go to state 71
    relop                          shift and go to state 72

state 52

    (64) factor -> call .

    TIMES           reduce using rule 64 (factor -> call .)
    DIVIDE          reduce using rule 64 (factor -> call .)
    LESS            reduce using rule 64 (factor -> call .)
    LESSEQUAL       reduce using rule 64 (factor -> call .)
    GREATER         reduce using rule 64 (factor -> call .)
    GREATEREQUAL    reduce using rule 64 (factor -> call .)
    DEQUAL          reduce using rule 64 (factor -> call .)
    DISTINT         reduce using rule 64 (factor -> call .)
    PLUS            reduce using rule 64 (factor -> call .)
    MINUS           reduce using rule 64 (factor -> call .)
    RPAREN          reduce using rule 64 (factor -> call .)
    COMMA           reduce using rule 64 (factor -> call .)
    SEMICOLON       reduce using rule 64 (factor -> call .)
    RBRACKET        reduce using rule 64 (factor -> call .)


state 53

    (28) statement -> expression_stmt .

    RBLOCK          reduce using rule 28 (statement -> expression_stmt .)
    LBLOCK          reduce using rule 28 (statement -> expression_stmt .)
    IF              reduce using rule 28 (statement -> expression_stmt .)
    WHILE           reduce using rule 28 (statement -> expression_stmt .)
    FOR             reduce using rule 28 (statement -> expression_stmt .)
    RETURN          reduce using rule 28 (statement -> expression_stmt .)
    ID              reduce using rule 28 (statement -> expression_stmt .)
    LPAREN          reduce using rule 28 (statement -> expression_stmt .)
    NUMBER          reduce using rule 28 (statement -> expression_stmt .)
    ELSE            reduce using rule 28 (statement -> expression_stmt .)


state 54

    (26) statement_list -> statement_list statement .

    RBLOCK          reduce using rule 26 (statement_list -> statement_list statement .)
    LBLOCK          reduce using rule 26 (statement_list -> statement_list statement .)
    IF              reduce using rule 26 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 26 (statement_list -> statement_list statement .)
    FOR             reduce using rule 26 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 26 (statement_list -> statement_list statement .)
    ID              reduce using rule 26 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 26 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 26 (statement_list -> statement_list statement .)


state 55

    (59) term -> factor .

    TIMES           reduce using rule 59 (term -> factor .)
    DIVIDE          reduce using rule 59 (term -> factor .)
    LESS            reduce using rule 59 (term -> factor .)
    LESSEQUAL       reduce using rule 59 (term -> factor .)
    GREATER         reduce using rule 59 (term -> factor .)
    GREATEREQUAL    reduce using rule 59 (term -> factor .)
    DEQUAL          reduce using rule 59 (term -> factor .)
    DISTINT         reduce using rule 59 (term -> factor .)
    PLUS            reduce using rule 59 (term -> factor .)
    MINUS           reduce using rule 59 (term -> factor .)
    SEMICOLON       reduce using rule 59 (term -> factor .)
    RPAREN          reduce using rule 59 (term -> factor .)
    RBRACKET        reduce using rule 59 (term -> factor .)
    COMMA           reduce using rule 59 (term -> factor .)


state 56

    (40) expression -> var . EQUAL expression
    (63) factor -> var .

    EQUAL           shift and go to state 81
    TIMES           reduce using rule 63 (factor -> var .)
    DIVIDE          reduce using rule 63 (factor -> var .)
    LESS            reduce using rule 63 (factor -> var .)
    LESSEQUAL       reduce using rule 63 (factor -> var .)
    GREATER         reduce using rule 63 (factor -> var .)
    GREATEREQUAL    reduce using rule 63 (factor -> var .)
    DEQUAL          reduce using rule 63 (factor -> var .)
    DISTINT         reduce using rule 63 (factor -> var .)
    PLUS            reduce using rule 63 (factor -> var .)
    MINUS           reduce using rule 63 (factor -> var .)
    RPAREN          reduce using rule 63 (factor -> var .)
    COMMA           reduce using rule 63 (factor -> var .)
    SEMICOLON       reduce using rule 63 (factor -> var .)
    RBRACKET        reduce using rule 63 (factor -> var .)


state 57

    (30) statement -> selection_stmt .

    RBLOCK          reduce using rule 30 (statement -> selection_stmt .)
    LBLOCK          reduce using rule 30 (statement -> selection_stmt .)
    IF              reduce using rule 30 (statement -> selection_stmt .)
    WHILE           reduce using rule 30 (statement -> selection_stmt .)
    FOR             reduce using rule 30 (statement -> selection_stmt .)
    RETURN          reduce using rule 30 (statement -> selection_stmt .)
    ID              reduce using rule 30 (statement -> selection_stmt .)
    LPAREN          reduce using rule 30 (statement -> selection_stmt .)
    NUMBER          reduce using rule 30 (statement -> selection_stmt .)
    ELSE            reduce using rule 30 (statement -> selection_stmt .)


state 58

    (37) iteration_stmt -> FOR . LPAREN var_declaration expression SEMICOLON expression RPAREN statement

    LPAREN          shift and go to state 82


state 59

    (65) factor -> NUMBER .

    TIMES           reduce using rule 65 (factor -> NUMBER .)
    DIVIDE          reduce using rule 65 (factor -> NUMBER .)
    LESS            reduce using rule 65 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 65 (factor -> NUMBER .)
    GREATER         reduce using rule 65 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 65 (factor -> NUMBER .)
    DEQUAL          reduce using rule 65 (factor -> NUMBER .)
    DISTINT         reduce using rule 65 (factor -> NUMBER .)
    PLUS            reduce using rule 65 (factor -> NUMBER .)
    MINUS           reduce using rule 65 (factor -> NUMBER .)
    RPAREN          reduce using rule 65 (factor -> NUMBER .)
    COMMA           reduce using rule 65 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 65 (factor -> NUMBER .)
    RBRACKET        reduce using rule 65 (factor -> NUMBER .)


state 60

    (29) statement -> compount_stmt .

    RBLOCK          reduce using rule 29 (statement -> compount_stmt .)
    LBLOCK          reduce using rule 29 (statement -> compount_stmt .)
    IF              reduce using rule 29 (statement -> compount_stmt .)
    WHILE           reduce using rule 29 (statement -> compount_stmt .)
    FOR             reduce using rule 29 (statement -> compount_stmt .)
    RETURN          reduce using rule 29 (statement -> compount_stmt .)
    ID              reduce using rule 29 (statement -> compount_stmt .)
    LPAREN          reduce using rule 29 (statement -> compount_stmt .)
    NUMBER          reduce using rule 29 (statement -> compount_stmt .)
    ELSE            reduce using rule 29 (statement -> compount_stmt .)


state 61

    (62) factor -> LPAREN . expression RPAREN
    (40) expression -> . var EQUAL expression
    (41) expression -> . simple_expression
    (42) expression -> . ID PLUS PLUS
    (43) expression -> . ID MINUS MINUS
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (58) term -> . term mulop factor
    (59) term -> . factor
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . var
    (64) factor -> . call
    (65) factor -> . NUMBER
    (66) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 62
    LPAREN          shift and go to state 61
    NUMBER          shift and go to state 59

    term                           shift and go to state 64
    call                           shift and go to state 52
    factor                         shift and go to state 55
    var                            shift and go to state 56
    simple_expression              shift and go to state 50
    expression                     shift and go to state 83
    additive_expression            shift and go to state 51

state 62

    (42) expression -> ID . PLUS PLUS
    (43) expression -> ID . MINUS MINUS
    (44) var -> ID .
    (45) var -> ID . LBRACKET expression RBRACKET
    (66) call -> ID . LPAREN args RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 86
    MINUS           shift and go to state 84
    EQUAL           reduce using rule 44 (var -> ID .)
    TIMES           reduce using rule 44 (var -> ID .)
    DIVIDE          reduce using rule 44 (var -> ID .)
    LESS            reduce using rule 44 (var -> ID .)
    LESSEQUAL       reduce using rule 44 (var -> ID .)
    GREATER         reduce using rule 44 (var -> ID .)
    GREATEREQUAL    reduce using rule 44 (var -> ID .)
    DEQUAL          reduce using rule 44 (var -> ID .)
    DISTINT         reduce using rule 44 (var -> ID .)
    SEMICOLON       reduce using rule 44 (var -> ID .)
    RPAREN          reduce using rule 44 (var -> ID .)
    RBRACKET        reduce using rule 44 (var -> ID .)
    COMMA           reduce using rule 44 (var -> ID .)
    LBRACKET        shift and go to state 85
    LPAREN          shift and go to state 87

  ! PLUS            [ reduce using rule 44 (var -> ID .) ]
  ! MINUS           [ reduce using rule 44 (var -> ID .) ]


state 63

    (34) selection_stmt -> IF . LPAREN expression RPAREN statement
    (35) selection_stmt -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 88


state 64

    (55) additive_expression -> term .
    (58) term -> term . mulop factor
    (60) mulop -> . TIMES
    (61) mulop -> . DIVIDE

    LESS            reduce using rule 55 (additive_expression -> term .)
    LESSEQUAL       reduce using rule 55 (additive_expression -> term .)
    GREATER         reduce using rule 55 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 55 (additive_expression -> term .)
    DEQUAL          reduce using rule 55 (additive_expression -> term .)
    DISTINT         reduce using rule 55 (additive_expression -> term .)
    PLUS            reduce using rule 55 (additive_expression -> term .)
    MINUS           reduce using rule 55 (additive_expression -> term .)
    RPAREN          reduce using rule 55 (additive_expression -> term .)
    SEMICOLON       reduce using rule 55 (additive_expression -> term .)
    COMMA           reduce using rule 55 (additive_expression -> term .)
    RBRACKET        reduce using rule 55 (additive_expression -> term .)
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90

    mulop                          shift and go to state 91

state 65

    (23) compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .

    RBLOCK          reduce using rule 23 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    LBLOCK          reduce using rule 23 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    IF              reduce using rule 23 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    WHILE           reduce using rule 23 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    FOR             reduce using rule 23 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    RETURN          reduce using rule 23 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    ID              reduce using rule 23 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    LPAREN          reduce using rule 23 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    NUMBER          reduce using rule 23 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    INT             reduce using rule 23 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    FLOAT           reduce using rule 23 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    VOID            reduce using rule 23 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    $end            reduce using rule 23 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    ELSE            reduce using rule 23 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)


state 66

    (31) statement -> iteration_stmt .

    RBLOCK          reduce using rule 31 (statement -> iteration_stmt .)
    LBLOCK          reduce using rule 31 (statement -> iteration_stmt .)
    IF              reduce using rule 31 (statement -> iteration_stmt .)
    WHILE           reduce using rule 31 (statement -> iteration_stmt .)
    FOR             reduce using rule 31 (statement -> iteration_stmt .)
    RETURN          reduce using rule 31 (statement -> iteration_stmt .)
    ID              reduce using rule 31 (statement -> iteration_stmt .)
    LPAREN          reduce using rule 31 (statement -> iteration_stmt .)
    NUMBER          reduce using rule 31 (statement -> iteration_stmt .)
    ELSE            reduce using rule 31 (statement -> iteration_stmt .)


state 67

    (33) expression_stmt -> expression . SEMICOLON

    SEMICOLON       shift and go to state 92


state 68

    (38) return_stmt -> RETURN SEMICOLON .

    RBLOCK          reduce using rule 38 (return_stmt -> RETURN SEMICOLON .)
    LBLOCK          reduce using rule 38 (return_stmt -> RETURN SEMICOLON .)
    IF              reduce using rule 38 (return_stmt -> RETURN SEMICOLON .)
    WHILE           reduce using rule 38 (return_stmt -> RETURN SEMICOLON .)
    FOR             reduce using rule 38 (return_stmt -> RETURN SEMICOLON .)
    RETURN          reduce using rule 38 (return_stmt -> RETURN SEMICOLON .)
    ID              reduce using rule 38 (return_stmt -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 38 (return_stmt -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 38 (return_stmt -> RETURN SEMICOLON .)
    ELSE            reduce using rule 38 (return_stmt -> RETURN SEMICOLON .)


state 69

    (39) return_stmt -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 93


state 70

    (36) iteration_stmt -> WHILE LPAREN . expression RPAREN statement
    (40) expression -> . var EQUAL expression
    (41) expression -> . simple_expression
    (42) expression -> . ID PLUS PLUS
    (43) expression -> . ID MINUS MINUS
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (58) term -> . term mulop factor
    (59) term -> . factor
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . var
    (64) factor -> . call
    (65) factor -> . NUMBER
    (66) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 62
    LPAREN          shift and go to state 61
    NUMBER          shift and go to state 59

    term                           shift and go to state 64
    call                           shift and go to state 52
    factor                         shift and go to state 55
    var                            shift and go to state 56
    simple_expression              shift and go to state 50
    expression                     shift and go to state 94
    additive_expression            shift and go to state 51

state 71

    (54) additive_expression -> additive_expression addop . term
    (58) term -> . term mulop factor
    (59) term -> . factor
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . var
    (64) factor -> . call
    (65) factor -> . NUMBER
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (66) call -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 61
    NUMBER          shift and go to state 59
    ID              shift and go to state 97

    term                           shift and go to state 95
    call                           shift and go to state 52
    factor                         shift and go to state 55
    var                            shift and go to state 96

state 72

    (46) simple_expression -> additive_expression relop . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (58) term -> . term mulop factor
    (59) term -> . factor
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . var
    (64) factor -> . call
    (65) factor -> . NUMBER
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (66) call -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 61
    NUMBER          shift and go to state 59
    ID              shift and go to state 97

    term                           shift and go to state 64
    call                           shift and go to state 52
    factor                         shift and go to state 55
    var                            shift and go to state 96
    additive_expression            shift and go to state 98

state 73

    (48) relop -> LESS .

    LPAREN          reduce using rule 48 (relop -> LESS .)
    NUMBER          reduce using rule 48 (relop -> LESS .)
    ID              reduce using rule 48 (relop -> LESS .)


state 74

    (52) relop -> DEQUAL .

    LPAREN          reduce using rule 52 (relop -> DEQUAL .)
    NUMBER          reduce using rule 52 (relop -> DEQUAL .)
    ID              reduce using rule 52 (relop -> DEQUAL .)


state 75

    (53) relop -> DISTINT .

    LPAREN          reduce using rule 53 (relop -> DISTINT .)
    NUMBER          reduce using rule 53 (relop -> DISTINT .)
    ID              reduce using rule 53 (relop -> DISTINT .)


state 76

    (51) relop -> GREATEREQUAL .

    LPAREN          reduce using rule 51 (relop -> GREATEREQUAL .)
    NUMBER          reduce using rule 51 (relop -> GREATEREQUAL .)
    ID              reduce using rule 51 (relop -> GREATEREQUAL .)


state 77

    (56) addop -> PLUS .

    LPAREN          reduce using rule 56 (addop -> PLUS .)
    NUMBER          reduce using rule 56 (addop -> PLUS .)
    ID              reduce using rule 56 (addop -> PLUS .)


state 78

    (49) relop -> LESSEQUAL .

    LPAREN          reduce using rule 49 (relop -> LESSEQUAL .)
    NUMBER          reduce using rule 49 (relop -> LESSEQUAL .)
    ID              reduce using rule 49 (relop -> LESSEQUAL .)


state 79

    (57) addop -> MINUS .

    LPAREN          reduce using rule 57 (addop -> MINUS .)
    NUMBER          reduce using rule 57 (addop -> MINUS .)
    ID              reduce using rule 57 (addop -> MINUS .)


state 80

    (50) relop -> GREATER .

    LPAREN          reduce using rule 50 (relop -> GREATER .)
    NUMBER          reduce using rule 50 (relop -> GREATER .)
    ID              reduce using rule 50 (relop -> GREATER .)


state 81

    (40) expression -> var EQUAL . expression
    (40) expression -> . var EQUAL expression
    (41) expression -> . simple_expression
    (42) expression -> . ID PLUS PLUS
    (43) expression -> . ID MINUS MINUS
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (58) term -> . term mulop factor
    (59) term -> . factor
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . var
    (64) factor -> . call
    (65) factor -> . NUMBER
    (66) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 62
    LPAREN          shift and go to state 61
    NUMBER          shift and go to state 59

    term                           shift and go to state 64
    call                           shift and go to state 52
    factor                         shift and go to state 55
    var                            shift and go to state 56
    simple_expression              shift and go to state 50
    expression                     shift and go to state 99
    additive_expression            shift and go to state 51

state 82

    (37) iteration_stmt -> FOR LPAREN . var_declaration expression SEMICOLON expression RPAREN statement
    (6) var_declaration -> . type_specifier ID SEMICOLON
    (7) var_declaration -> . type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
    (8) var_declaration -> . type_specifier ID EQUAL NUMBER SEMICOLON
    (9) var_declaration -> . type_specifier variosIDs SEMICOLON
    (12) type_specifier -> . INT
    (13) type_specifier -> . FLOAT
    (14) type_specifier -> . VOID

    INT             shift and go to state 9
    FLOAT           shift and go to state 4
    VOID            shift and go to state 3

    var_declaration                shift and go to state 100
    type_specifier                 shift and go to state 42

state 83

    (62) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 101


state 84

    (43) expression -> ID MINUS . MINUS

    MINUS           shift and go to state 102


state 85

    (45) var -> ID LBRACKET . expression RBRACKET
    (40) expression -> . var EQUAL expression
    (41) expression -> . simple_expression
    (42) expression -> . ID PLUS PLUS
    (43) expression -> . ID MINUS MINUS
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (58) term -> . term mulop factor
    (59) term -> . factor
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . var
    (64) factor -> . call
    (65) factor -> . NUMBER
    (66) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 62
    LPAREN          shift and go to state 61
    NUMBER          shift and go to state 59

    term                           shift and go to state 64
    call                           shift and go to state 52
    factor                         shift and go to state 55
    var                            shift and go to state 56
    simple_expression              shift and go to state 50
    expression                     shift and go to state 103
    additive_expression            shift and go to state 51

state 86

    (42) expression -> ID PLUS . PLUS

    PLUS            shift and go to state 104


state 87

    (66) call -> ID LPAREN . args RPAREN
    (67) args -> . args_list
    (68) args -> . empty
    (69) args_list -> . args_list COMMA expression
    (70) args_list -> . expression
    (71) empty -> .
    (40) expression -> . var EQUAL expression
    (41) expression -> . simple_expression
    (42) expression -> . ID PLUS PLUS
    (43) expression -> . ID MINUS MINUS
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (58) term -> . term mulop factor
    (59) term -> . factor
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . var
    (64) factor -> . call
    (65) factor -> . NUMBER
    (66) call -> . ID LPAREN args RPAREN

    RPAREN          reduce using rule 71 (empty -> .)
    ID              shift and go to state 62
    LPAREN          shift and go to state 61
    NUMBER          shift and go to state 59

    term                           shift and go to state 64
    args                           shift and go to state 106
    args_list                      shift and go to state 107
    call                           shift and go to state 52
    additive_expression            shift and go to state 51
    factor                         shift and go to state 55
    var                            shift and go to state 56
    simple_expression              shift and go to state 50
    expression                     shift and go to state 108
    empty                          shift and go to state 105

state 88

    (34) selection_stmt -> IF LPAREN . expression RPAREN statement
    (35) selection_stmt -> IF LPAREN . expression RPAREN statement ELSE statement
    (40) expression -> . var EQUAL expression
    (41) expression -> . simple_expression
    (42) expression -> . ID PLUS PLUS
    (43) expression -> . ID MINUS MINUS
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (58) term -> . term mulop factor
    (59) term -> . factor
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . var
    (64) factor -> . call
    (65) factor -> . NUMBER
    (66) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 62
    LPAREN          shift and go to state 61
    NUMBER          shift and go to state 59

    term                           shift and go to state 64
    call                           shift and go to state 52
    factor                         shift and go to state 55
    var                            shift and go to state 56
    simple_expression              shift and go to state 50
    expression                     shift and go to state 109
    additive_expression            shift and go to state 51

state 89

    (60) mulop -> TIMES .

    LPAREN          reduce using rule 60 (mulop -> TIMES .)
    NUMBER          reduce using rule 60 (mulop -> TIMES .)
    ID              reduce using rule 60 (mulop -> TIMES .)


state 90

    (61) mulop -> DIVIDE .

    LPAREN          reduce using rule 61 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 61 (mulop -> DIVIDE .)
    ID              reduce using rule 61 (mulop -> DIVIDE .)


state 91

    (58) term -> term mulop . factor
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . var
    (64) factor -> . call
    (65) factor -> . NUMBER
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (66) call -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 61
    NUMBER          shift and go to state 59
    ID              shift and go to state 97

    call                           shift and go to state 52
    factor                         shift and go to state 110
    var                            shift and go to state 96

state 92

    (33) expression_stmt -> expression SEMICOLON .

    RBLOCK          reduce using rule 33 (expression_stmt -> expression SEMICOLON .)
    LBLOCK          reduce using rule 33 (expression_stmt -> expression SEMICOLON .)
    IF              reduce using rule 33 (expression_stmt -> expression SEMICOLON .)
    WHILE           reduce using rule 33 (expression_stmt -> expression SEMICOLON .)
    FOR             reduce using rule 33 (expression_stmt -> expression SEMICOLON .)
    RETURN          reduce using rule 33 (expression_stmt -> expression SEMICOLON .)
    ID              reduce using rule 33 (expression_stmt -> expression SEMICOLON .)
    LPAREN          reduce using rule 33 (expression_stmt -> expression SEMICOLON .)
    NUMBER          reduce using rule 33 (expression_stmt -> expression SEMICOLON .)
    ELSE            reduce using rule 33 (expression_stmt -> expression SEMICOLON .)


state 93

    (39) return_stmt -> RETURN expression SEMICOLON .

    RBLOCK          reduce using rule 39 (return_stmt -> RETURN expression SEMICOLON .)
    LBLOCK          reduce using rule 39 (return_stmt -> RETURN expression SEMICOLON .)
    IF              reduce using rule 39 (return_stmt -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 39 (return_stmt -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 39 (return_stmt -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 39 (return_stmt -> RETURN expression SEMICOLON .)
    ID              reduce using rule 39 (return_stmt -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 39 (return_stmt -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 39 (return_stmt -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 39 (return_stmt -> RETURN expression SEMICOLON .)


state 94

    (36) iteration_stmt -> WHILE LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 111


state 95

    (54) additive_expression -> additive_expression addop term .
    (58) term -> term . mulop factor
    (60) mulop -> . TIMES
    (61) mulop -> . DIVIDE

    LESS            reduce using rule 54 (additive_expression -> additive_expression addop term .)
    LESSEQUAL       reduce using rule 54 (additive_expression -> additive_expression addop term .)
    GREATER         reduce using rule 54 (additive_expression -> additive_expression addop term .)
    GREATEREQUAL    reduce using rule 54 (additive_expression -> additive_expression addop term .)
    DEQUAL          reduce using rule 54 (additive_expression -> additive_expression addop term .)
    DISTINT         reduce using rule 54 (additive_expression -> additive_expression addop term .)
    PLUS            reduce using rule 54 (additive_expression -> additive_expression addop term .)
    MINUS           reduce using rule 54 (additive_expression -> additive_expression addop term .)
    RPAREN          reduce using rule 54 (additive_expression -> additive_expression addop term .)
    SEMICOLON       reduce using rule 54 (additive_expression -> additive_expression addop term .)
    COMMA           reduce using rule 54 (additive_expression -> additive_expression addop term .)
    RBRACKET        reduce using rule 54 (additive_expression -> additive_expression addop term .)
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90

    mulop                          shift and go to state 91

state 96

    (63) factor -> var .

    TIMES           reduce using rule 63 (factor -> var .)
    DIVIDE          reduce using rule 63 (factor -> var .)
    LESS            reduce using rule 63 (factor -> var .)
    LESSEQUAL       reduce using rule 63 (factor -> var .)
    GREATER         reduce using rule 63 (factor -> var .)
    GREATEREQUAL    reduce using rule 63 (factor -> var .)
    DEQUAL          reduce using rule 63 (factor -> var .)
    DISTINT         reduce using rule 63 (factor -> var .)
    PLUS            reduce using rule 63 (factor -> var .)
    MINUS           reduce using rule 63 (factor -> var .)
    SEMICOLON       reduce using rule 63 (factor -> var .)
    RPAREN          reduce using rule 63 (factor -> var .)
    RBRACKET        reduce using rule 63 (factor -> var .)
    COMMA           reduce using rule 63 (factor -> var .)


state 97

    (44) var -> ID .
    (45) var -> ID . LBRACKET expression RBRACKET
    (66) call -> ID . LPAREN args RPAREN

    TIMES           reduce using rule 44 (var -> ID .)
    DIVIDE          reduce using rule 44 (var -> ID .)
    LESS            reduce using rule 44 (var -> ID .)
    LESSEQUAL       reduce using rule 44 (var -> ID .)
    GREATER         reduce using rule 44 (var -> ID .)
    GREATEREQUAL    reduce using rule 44 (var -> ID .)
    DEQUAL          reduce using rule 44 (var -> ID .)
    DISTINT         reduce using rule 44 (var -> ID .)
    PLUS            reduce using rule 44 (var -> ID .)
    MINUS           reduce using rule 44 (var -> ID .)
    SEMICOLON       reduce using rule 44 (var -> ID .)
    RPAREN          reduce using rule 44 (var -> ID .)
    RBRACKET        reduce using rule 44 (var -> ID .)
    COMMA           reduce using rule 44 (var -> ID .)
    LBRACKET        shift and go to state 85
    LPAREN          shift and go to state 87


state 98

    (46) simple_expression -> additive_expression relop additive_expression .
    (54) additive_expression -> additive_expression . addop term
    (56) addop -> . PLUS
    (57) addop -> . MINUS

    SEMICOLON       reduce using rule 46 (simple_expression -> additive_expression relop additive_expression .)
    COMMA           reduce using rule 46 (simple_expression -> additive_expression relop additive_expression .)
    RPAREN          reduce using rule 46 (simple_expression -> additive_expression relop additive_expression .)
    RBRACKET        reduce using rule 46 (simple_expression -> additive_expression relop additive_expression .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 79

    addop                          shift and go to state 71

state 99

    (40) expression -> var EQUAL expression .

    RPAREN          reduce using rule 40 (expression -> var EQUAL expression .)
    SEMICOLON       reduce using rule 40 (expression -> var EQUAL expression .)
    RBRACKET        reduce using rule 40 (expression -> var EQUAL expression .)
    COMMA           reduce using rule 40 (expression -> var EQUAL expression .)


state 100

    (37) iteration_stmt -> FOR LPAREN var_declaration . expression SEMICOLON expression RPAREN statement
    (40) expression -> . var EQUAL expression
    (41) expression -> . simple_expression
    (42) expression -> . ID PLUS PLUS
    (43) expression -> . ID MINUS MINUS
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (58) term -> . term mulop factor
    (59) term -> . factor
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . var
    (64) factor -> . call
    (65) factor -> . NUMBER
    (66) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 62
    LPAREN          shift and go to state 61
    NUMBER          shift and go to state 59

    term                           shift and go to state 64
    call                           shift and go to state 52
    factor                         shift and go to state 55
    var                            shift and go to state 56
    simple_expression              shift and go to state 50
    expression                     shift and go to state 112
    additive_expression            shift and go to state 51

state 101

    (62) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 62 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 62 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 62 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 62 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 62 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 62 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 62 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 62 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 62 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 62 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 62 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 62 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 62 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 62 (factor -> LPAREN expression RPAREN .)


state 102

    (43) expression -> ID MINUS MINUS .

    RPAREN          reduce using rule 43 (expression -> ID MINUS MINUS .)
    SEMICOLON       reduce using rule 43 (expression -> ID MINUS MINUS .)
    RBRACKET        reduce using rule 43 (expression -> ID MINUS MINUS .)
    COMMA           reduce using rule 43 (expression -> ID MINUS MINUS .)


state 103

    (45) var -> ID LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 113


state 104

    (42) expression -> ID PLUS PLUS .

    RPAREN          reduce using rule 42 (expression -> ID PLUS PLUS .)
    SEMICOLON       reduce using rule 42 (expression -> ID PLUS PLUS .)
    RBRACKET        reduce using rule 42 (expression -> ID PLUS PLUS .)
    COMMA           reduce using rule 42 (expression -> ID PLUS PLUS .)


state 105

    (68) args -> empty .

    RPAREN          reduce using rule 68 (args -> empty .)


state 106

    (66) call -> ID LPAREN args . RPAREN

    RPAREN          shift and go to state 114


state 107

    (67) args -> args_list .
    (69) args_list -> args_list . COMMA expression

    RPAREN          reduce using rule 67 (args -> args_list .)
    COMMA           shift and go to state 115


state 108

    (70) args_list -> expression .

    COMMA           reduce using rule 70 (args_list -> expression .)
    RPAREN          reduce using rule 70 (args_list -> expression .)


state 109

    (34) selection_stmt -> IF LPAREN expression . RPAREN statement
    (35) selection_stmt -> IF LPAREN expression . RPAREN statement ELSE statement

    RPAREN          shift and go to state 116


state 110

    (58) term -> term mulop factor .

    TIMES           reduce using rule 58 (term -> term mulop factor .)
    DIVIDE          reduce using rule 58 (term -> term mulop factor .)
    LESS            reduce using rule 58 (term -> term mulop factor .)
    LESSEQUAL       reduce using rule 58 (term -> term mulop factor .)
    GREATER         reduce using rule 58 (term -> term mulop factor .)
    GREATEREQUAL    reduce using rule 58 (term -> term mulop factor .)
    DEQUAL          reduce using rule 58 (term -> term mulop factor .)
    DISTINT         reduce using rule 58 (term -> term mulop factor .)
    PLUS            reduce using rule 58 (term -> term mulop factor .)
    MINUS           reduce using rule 58 (term -> term mulop factor .)
    SEMICOLON       reduce using rule 58 (term -> term mulop factor .)
    RPAREN          reduce using rule 58 (term -> term mulop factor .)
    RBRACKET        reduce using rule 58 (term -> term mulop factor .)
    COMMA           reduce using rule 58 (term -> term mulop factor .)


state 111

    (36) iteration_stmt -> WHILE LPAREN expression RPAREN . statement
    (28) statement -> . expression_stmt
    (29) statement -> . compount_stmt
    (30) statement -> . selection_stmt
    (31) statement -> . iteration_stmt
    (32) statement -> . return_stmt
    (33) expression_stmt -> . expression SEMICOLON
    (23) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (34) selection_stmt -> . IF LPAREN expression RPAREN statement
    (35) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (36) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (37) iteration_stmt -> . FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement
    (38) return_stmt -> . RETURN SEMICOLON
    (39) return_stmt -> . RETURN expression SEMICOLON
    (40) expression -> . var EQUAL expression
    (41) expression -> . simple_expression
    (42) expression -> . ID PLUS PLUS
    (43) expression -> . ID MINUS MINUS
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (58) term -> . term mulop factor
    (59) term -> . factor
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . var
    (64) factor -> . call
    (65) factor -> . NUMBER
    (66) call -> . ID LPAREN args RPAREN

    LBLOCK          shift and go to state 38
    IF              shift and go to state 63
    WHILE           shift and go to state 48
    FOR             shift and go to state 58
    RETURN          shift and go to state 47
    ID              shift and go to state 62
    LPAREN          shift and go to state 61
    NUMBER          shift and go to state 59

    return_stmt                    shift and go to state 49
    call                           shift and go to state 52
    factor                         shift and go to state 55
    compount_stmt                  shift and go to state 60
    var                            shift and go to state 56
    expression_stmt                shift and go to state 53
    term                           shift and go to state 64
    statement                      shift and go to state 117
    selection_stmt                 shift and go to state 57
    iteration_stmt                 shift and go to state 66
    simple_expression              shift and go to state 50
    expression                     shift and go to state 67
    additive_expression            shift and go to state 51

state 112

    (37) iteration_stmt -> FOR LPAREN var_declaration expression . SEMICOLON expression RPAREN statement

    SEMICOLON       shift and go to state 118


state 113

    (45) var -> ID LBRACKET expression RBRACKET .

    EQUAL           reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    LESS            reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 45 (var -> ID LBRACKET expression RBRACKET .)


state 114

    (66) call -> ID LPAREN args RPAREN .

    TIMES           reduce using rule 66 (call -> ID LPAREN args RPAREN .)
    DIVIDE          reduce using rule 66 (call -> ID LPAREN args RPAREN .)
    LESS            reduce using rule 66 (call -> ID LPAREN args RPAREN .)
    LESSEQUAL       reduce using rule 66 (call -> ID LPAREN args RPAREN .)
    GREATER         reduce using rule 66 (call -> ID LPAREN args RPAREN .)
    GREATEREQUAL    reduce using rule 66 (call -> ID LPAREN args RPAREN .)
    DEQUAL          reduce using rule 66 (call -> ID LPAREN args RPAREN .)
    DISTINT         reduce using rule 66 (call -> ID LPAREN args RPAREN .)
    PLUS            reduce using rule 66 (call -> ID LPAREN args RPAREN .)
    MINUS           reduce using rule 66 (call -> ID LPAREN args RPAREN .)
    RBRACKET        reduce using rule 66 (call -> ID LPAREN args RPAREN .)
    RPAREN          reduce using rule 66 (call -> ID LPAREN args RPAREN .)
    COMMA           reduce using rule 66 (call -> ID LPAREN args RPAREN .)
    SEMICOLON       reduce using rule 66 (call -> ID LPAREN args RPAREN .)


state 115

    (69) args_list -> args_list COMMA . expression
    (40) expression -> . var EQUAL expression
    (41) expression -> . simple_expression
    (42) expression -> . ID PLUS PLUS
    (43) expression -> . ID MINUS MINUS
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (58) term -> . term mulop factor
    (59) term -> . factor
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . var
    (64) factor -> . call
    (65) factor -> . NUMBER
    (66) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 62
    LPAREN          shift and go to state 61
    NUMBER          shift and go to state 59

    term                           shift and go to state 64
    call                           shift and go to state 52
    factor                         shift and go to state 55
    var                            shift and go to state 56
    simple_expression              shift and go to state 50
    expression                     shift and go to state 119
    additive_expression            shift and go to state 51

state 116

    (34) selection_stmt -> IF LPAREN expression RPAREN . statement
    (35) selection_stmt -> IF LPAREN expression RPAREN . statement ELSE statement
    (28) statement -> . expression_stmt
    (29) statement -> . compount_stmt
    (30) statement -> . selection_stmt
    (31) statement -> . iteration_stmt
    (32) statement -> . return_stmt
    (33) expression_stmt -> . expression SEMICOLON
    (23) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (34) selection_stmt -> . IF LPAREN expression RPAREN statement
    (35) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (36) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (37) iteration_stmt -> . FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement
    (38) return_stmt -> . RETURN SEMICOLON
    (39) return_stmt -> . RETURN expression SEMICOLON
    (40) expression -> . var EQUAL expression
    (41) expression -> . simple_expression
    (42) expression -> . ID PLUS PLUS
    (43) expression -> . ID MINUS MINUS
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (58) term -> . term mulop factor
    (59) term -> . factor
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . var
    (64) factor -> . call
    (65) factor -> . NUMBER
    (66) call -> . ID LPAREN args RPAREN

    LBLOCK          shift and go to state 38
    IF              shift and go to state 63
    WHILE           shift and go to state 48
    FOR             shift and go to state 58
    RETURN          shift and go to state 47
    ID              shift and go to state 62
    LPAREN          shift and go to state 61
    NUMBER          shift and go to state 59

    return_stmt                    shift and go to state 49
    call                           shift and go to state 52
    factor                         shift and go to state 55
    compount_stmt                  shift and go to state 60
    var                            shift and go to state 56
    expression_stmt                shift and go to state 53
    term                           shift and go to state 64
    statement                      shift and go to state 120
    selection_stmt                 shift and go to state 57
    iteration_stmt                 shift and go to state 66
    simple_expression              shift and go to state 50
    expression                     shift and go to state 67
    additive_expression            shift and go to state 51

state 117

    (36) iteration_stmt -> WHILE LPAREN expression RPAREN statement .

    RBLOCK          reduce using rule 36 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 36 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 36 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 36 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 36 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 36 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 36 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 36 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 36 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 36 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)


state 118

    (37) iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON . expression RPAREN statement
    (40) expression -> . var EQUAL expression
    (41) expression -> . simple_expression
    (42) expression -> . ID PLUS PLUS
    (43) expression -> . ID MINUS MINUS
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (58) term -> . term mulop factor
    (59) term -> . factor
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . var
    (64) factor -> . call
    (65) factor -> . NUMBER
    (66) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 62
    LPAREN          shift and go to state 61
    NUMBER          shift and go to state 59

    term                           shift and go to state 64
    call                           shift and go to state 52
    factor                         shift and go to state 55
    var                            shift and go to state 56
    simple_expression              shift and go to state 50
    expression                     shift and go to state 121
    additive_expression            shift and go to state 51

state 119

    (69) args_list -> args_list COMMA expression .

    COMMA           reduce using rule 69 (args_list -> args_list COMMA expression .)
    RPAREN          reduce using rule 69 (args_list -> args_list COMMA expression .)


state 120

    (34) selection_stmt -> IF LPAREN expression RPAREN statement .
    (35) selection_stmt -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBLOCK          reduce using rule 34 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 34 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 34 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 34 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 34 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 34 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 34 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 34 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 34 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 122

  ! ELSE            [ reduce using rule 34 (selection_stmt -> IF LPAREN expression RPAREN statement .) ]


state 121

    (37) iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression . RPAREN statement

    RPAREN          shift and go to state 123


state 122

    (35) selection_stmt -> IF LPAREN expression RPAREN statement ELSE . statement
    (28) statement -> . expression_stmt
    (29) statement -> . compount_stmt
    (30) statement -> . selection_stmt
    (31) statement -> . iteration_stmt
    (32) statement -> . return_stmt
    (33) expression_stmt -> . expression SEMICOLON
    (23) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (34) selection_stmt -> . IF LPAREN expression RPAREN statement
    (35) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (36) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (37) iteration_stmt -> . FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement
    (38) return_stmt -> . RETURN SEMICOLON
    (39) return_stmt -> . RETURN expression SEMICOLON
    (40) expression -> . var EQUAL expression
    (41) expression -> . simple_expression
    (42) expression -> . ID PLUS PLUS
    (43) expression -> . ID MINUS MINUS
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (58) term -> . term mulop factor
    (59) term -> . factor
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . var
    (64) factor -> . call
    (65) factor -> . NUMBER
    (66) call -> . ID LPAREN args RPAREN

    LBLOCK          shift and go to state 38
    IF              shift and go to state 63
    WHILE           shift and go to state 48
    FOR             shift and go to state 58
    RETURN          shift and go to state 47
    ID              shift and go to state 62
    LPAREN          shift and go to state 61
    NUMBER          shift and go to state 59

    return_stmt                    shift and go to state 49
    call                           shift and go to state 52
    factor                         shift and go to state 55
    compount_stmt                  shift and go to state 60
    var                            shift and go to state 56
    expression_stmt                shift and go to state 53
    term                           shift and go to state 64
    statement                      shift and go to state 124
    selection_stmt                 shift and go to state 57
    iteration_stmt                 shift and go to state 66
    simple_expression              shift and go to state 50
    expression                     shift and go to state 67
    additive_expression            shift and go to state 51

state 123

    (37) iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN . statement
    (28) statement -> . expression_stmt
    (29) statement -> . compount_stmt
    (30) statement -> . selection_stmt
    (31) statement -> . iteration_stmt
    (32) statement -> . return_stmt
    (33) expression_stmt -> . expression SEMICOLON
    (23) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (34) selection_stmt -> . IF LPAREN expression RPAREN statement
    (35) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (36) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (37) iteration_stmt -> . FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement
    (38) return_stmt -> . RETURN SEMICOLON
    (39) return_stmt -> . RETURN expression SEMICOLON
    (40) expression -> . var EQUAL expression
    (41) expression -> . simple_expression
    (42) expression -> . ID PLUS PLUS
    (43) expression -> . ID MINUS MINUS
    (44) var -> . ID
    (45) var -> . ID LBRACKET expression RBRACKET
    (46) simple_expression -> . additive_expression relop additive_expression
    (47) simple_expression -> . additive_expression
    (54) additive_expression -> . additive_expression addop term
    (55) additive_expression -> . term
    (58) term -> . term mulop factor
    (59) term -> . factor
    (62) factor -> . LPAREN expression RPAREN
    (63) factor -> . var
    (64) factor -> . call
    (65) factor -> . NUMBER
    (66) call -> . ID LPAREN args RPAREN

    LBLOCK          shift and go to state 38
    IF              shift and go to state 63
    WHILE           shift and go to state 48
    FOR             shift and go to state 58
    RETURN          shift and go to state 47
    ID              shift and go to state 62
    LPAREN          shift and go to state 61
    NUMBER          shift and go to state 59

    term                           shift and go to state 64
    return_stmt                    shift and go to state 49
    call                           shift and go to state 52
    factor                         shift and go to state 55
    compount_stmt                  shift and go to state 60
    iteration_stmt                 shift and go to state 66
    var                            shift and go to state 56
    expression_stmt                shift and go to state 53
    statement                      shift and go to state 125
    selection_stmt                 shift and go to state 57
    simple_expression              shift and go to state 50
    expression                     shift and go to state 67
    additive_expression            shift and go to state 51

state 124

    (35) selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .

    RBLOCK          reduce using rule 35 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBLOCK          reduce using rule 35 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 35 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 35 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 35 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 35 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 35 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 35 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 35 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 35 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)


state 125

    (37) iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement .

    RBLOCK          reduce using rule 37 (iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement .)
    LBLOCK          reduce using rule 37 (iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement .)
    IF              reduce using rule 37 (iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement .)
    WHILE           reduce using rule 37 (iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement .)
    FOR             reduce using rule 37 (iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement .)
    RETURN          reduce using rule 37 (iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement .)
    ID              reduce using rule 37 (iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement .)
    LPAREN          reduce using rule 37 (iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement .)
    NUMBER          reduce using rule 37 (iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement .)
    ELSE            reduce using rule 37 (iteration_stmt -> FOR LPAREN var_declaration expression SEMICOLON expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 11 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 46 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 62 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 62 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 120 resolved as shift
